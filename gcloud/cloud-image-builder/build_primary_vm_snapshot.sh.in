#! /bin/bash -e
PWD=`pwd`
source aurora_infra_settings.conf
export PATH=/opt/pg/scripts:/opt/pg/scripts/gcloud/cloud_image_builder:$PATH
. gc_helpers.sh
. ~/.aurora.conf

_USER=plumgrid
BUILD_ENV_USER=${USER}

STEPS_ST=1
STEPS_ED=20

# forward to subshells
trap "kill 0" SIGINT
trap "kill 0" SIGTERM

function usage() {
cat <<EOF
usage: $0
-R | --start : Jump to specific step in the install process
-E | --end : Stop at this step when
-h | --help : help
EOF
exit 0
}

# Parsing arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -R| --start ) STEPS_ST="$2"; shift ;;
    -E| --end ) STEPS_ED="$2"; shift ;;
    -h | --help ) usage; ;;
    -- ) shift; break ;;
    * )
      log "Unknown parameter: $1";
      usage; break;;
  esac
  shift
done

function build_image() {
  local step=$1
  # It should give the version number as an argument.

  case "$step" in
      1)
          echo "Creating the disk[${PRIM_INST_NAME}-d1] for the instance in the cloud"
          exec_gcloud_cmd disks create "${PRIM_INST_NAME}-d1" \
            --image "$BASE_LINUX" --type "$DISK_TYPE" --size="$DISK1_SIZE" -q
          exec_gcloud_cmd disks create "${PRIM_INST_NAME}-d2" \
            --type "$DISK_TYPE" --size="$DISK2_SIZE" -q
        ;;
      2)
          echo "Creating the instance[$PRIM_INST_NAME] in the cloud"
          echo plumgrid:$(cat /home/${USER}/.ssh/id_rsa.pub) > /tmp/keys
          echo plumgrid:$(echo ${COMMON_KEY}) >> /tmp/keys
          exec_gcloud_cmd instances create "${PRIM_INST_NAME}"  \
            --machine-type "$MACHINE_TYPE" --network "${NETWORK[$GCLOUD_PROJECT]}" --maintenance-policy \
            "MIGRATE" --scopes "$SCOPES" -q \
            --disk "name=${PRIM_INST_NAME}-d1" "mode=rw" "boot=yes" "auto-delete=yes" \
            --disk "name=${PRIM_INST_NAME}-d2" "mode=rw" "boot=no" "auto-delete=yes" \
            --no-address --tags "no-ip" --metadata-from-file sshKeys=/tmp/keys
        ;;
      3)
          set -x
          echo "Waiting for the machine to boot up and allow ssh access"
          INSTANCE_IP=$(get_instance_ip ${PRIM_INST_NAME})
          wait_for_instance ${INSTANCE_IP}
          ;;
      4)
          echo "Copying setup file over"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo ifconfig eth0 mtu 1400"
          tryexec scp -o StrictHostKeyChecking=no @CMAKE_CURRENT_BINARY_DIR@/vm_files/* ${_USER}@${INSTANCE_IP}:.
          ;;

      5)
          echo "Setting up ccache"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x vm_setup_ccache.sh'"
          ;;

      6)
          echo "Running base init script on the Instance"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo bash -x vm_setup_preinit.sh"
          ;;
      7)
          echo "Running base setup script on the Instance"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo bash -x ./vm_setup_base.sh"
          ;;
      8)
          echo "git clone of tools"
          tryexec run_cmd_gci_sshforwarding ${INSTANCE_IP} "git clone ssh://${gerritid}@gerrit:29418/tools.git ~/work/tools"
          ;;
      9)
          projs="pg_ui iovisor sal pkg pg_cli python-plumgridlib alps coral corelib"
          echo "git clone of $projs"
          for pr in $projs ; do
              echo "   ==> Extracting $pr on the instance[$INSTANCE_IP]"
              tryexec run_cmd_gci_sshforwarding ${INSTANCE_IP} "git clone ssh://${gerritid}@gerrit:29418/${pr}.git ~/work/${pr}"
          done
          ;;

      10)
          echo "Building tools"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_setup_tools.sh'"
          ;;

      11)
          echo "Checking out master for the projects"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_checkout_branch.sh master'"
          ;;

      12)
          echo "Building the rest for master"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_setup_all.sh master'"
          ;;

      13)
          echo "Cleaning up stuff"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash /home/plumgrid/work/alps/scripts/system_cleanup.sh'"
          ;;

      14)
          echo "Checking out stable_4_3 for the projects"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_checkout_branch.sh stable_4_3'"
          ;;

      15)
          echo "Building the rest for stable_4_3"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_setup_all.sh stable_4_3'"
          ;;

      16)
          echo "Cleaning up stuff"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash /home/plumgrid/work/alps/scripts/system_cleanup.sh'"
          ;;


      17)
          echo "Checking out stable_5_0 for the projects"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_checkout_branch.sh stable_5_0'"
          ;;

      18)
          echo "Building the rest for stable_5_0"
          retryexec run_cmd_gci ${INSTANCE_IP} "sudo su plumgrid -c 'bash -x ./vm_setup_all.sh stable_5_0'"
          ;;

      19)
          echo "Making a snapshot of the VM"
          SN_ID=`date +%s`
          SNAP_D1="$PRIM_INST_NAME-d1-${SN_ID}"
          SNAP_D2="$PRIM_INST_NAME-d2-${SN_ID}"
          echo "SNAP_D1 = [$SNAP_D1]"
          echo gcloud compute disks snapshot $PRIM_INST_NAME-d1 --snapshot-names $SNAP_D1
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo sync"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo fsfreeze -f /opt || true"
          gcloud compute disks snapshot $PRIM_INST_NAME-d2 --snapshot-names "$SNAP_D2"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo sync"
          tryexec run_cmd_gci ${INSTANCE_IP} "sudo fsfreeze -f / || true"
          gcloud compute disks snapshot $PRIM_INST_NAME-d1 --snapshot-names "$SNAP_D1"
          ;;
      20)
          echo "Shutting down the Instance $PRIM_INST_NAME"
          gcloud compute instances delete $PRIM_INST_NAME --delete-disks all  -q
          ;;
      *)
          echo "NOP - $step"
          ;;
esac
}

echo " ====== Starting STEP [$MAJOR_STEP] Number of Steps ::${MINOR_STEPS_ST[$MAJOR_STEP]} -> ${MINOR_STEPS_ED[$MAJOR_STEP]}  ======"
for step in `seq ${STEPS_ST} ${STEPS_ED}`; do
  printf "\n  === Starting STEP [$step] === \n"
            build_image $step
done

exit 0
