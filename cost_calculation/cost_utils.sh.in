#!/bin/bash -e
source pl_settings.conf
declare -A instance_usages
instance_usages[N1Standard_1]=0
instance_usages[N1Standard_2]=0
instance_usages[N1Standard_4]=0
instance_usages[N1Highcpu_2]=0
instance_usages[N1Highmem_4]=0
instance_usages[N1Highmem_2]=0
instance_usages[G1Small]=0
instance_usages[F1Micro]=0

declare -A instance_rates
instance_rates[N1Standard_1]=0.050
instance_rates[N1Standard_2]=0.100
instance_rates[N1Standard_4]=0.200
instance_rates[N1Standard_8]=0.400
instance_rates[N1Standard_16]=0.800
instance_rates[N1Highcpu_2]=0.076
instance_rates[N1Highcpu_4]=0.152
instance_rates[N1Highcpu_8]=0.304
instance_rates[N1Highcpu_16]=0.608
instance_rates[N1Highcpu_32]=1.216
instance_rates[N1Highmem_2]=0.126
instance_rates[N1Highmem_4]=0.252
instance_rates[N1Highmem_8]=0.504
instance_rates[N1Highmem_16]=1.008
instance_rates[N1Highmem_32]=2.016
instance_rates[G1Small]=0.027
instance_rates[F1Micro]=0.008
instance_rates[PreemptibleN1Standard_4]=0.060


show_help() {
  echo "Required Arguments:
  -p, --pipeline            Use this option if you want to get cost for a specific pipeline or all pipelines.
                            e.g. aurora cost -p smoke or aurora cost -p all
  OR
  -U, --user                Use this option if you want to get cost for a specific user or all users.
                            e.g. aurora cost -U jenkins or aurora cost -U all

Optional Arguments:
  -T, --duration            Use this option to specific time duration for you want the cost for. e.g. aurora cost -p smoke -T week.
                            Valid options are 'day' 'week' 'month'. Default value is day.
  -d, --date                Use this option if you want to get cost for a specific date. Please use the format YYYYMMDD.
                            e.g. aurora cost -p smoke -d 201505021
  -W, --WORKSPACE           Use this option to define workspace. Default is /tmp/cost " 1>&2;
  exit 1;
}

# *****************************************************************************
# Function: get_time_spent
# Purpose : Calculates time spent for each instance type from supplied file.
#           Returns the ouput file path.
# Usage   : get_time_spent <file> <workspace>
# *****************************************************************************
function get_time_spent() {
 local file=$1
 local path=$2
 local code=$3
 local old_time
 local new_time
 while read line
 do
 instance_type=`echo $line | cut -d',' -f 2`
 instance_type=${instance_type##*/}
 instance_type=${instance_type:7}
 time_sec=`echo $line | cut -d',' -f 3`

 old_time="${instance_usages[$instance_type]}"
 new_time=$((old_time + time_sec))
 instance_usages[$instance_type]=$new_time
 done < "$file"
 cat /dev/null > tmp_time_${code}.txt
 for i in "${!instance_usages[@]}"; do
  printf "%s%s%s\n" "$i" ":" "${instance_usages[$i]}" >> tmp_time_${code}.txt
 done
 file=tmp_time_${code}.txt
 mv "$file" "$path"
 echo "$path$file"
}

# *****************************************************************************
# Function: get_cost_spent
# Purpose : Calculates cost spent for each instance type from supplied file.
#           Returns total cost spent.
# Usage   : get_time_spent <file>
# *****************************************************************************
function get_cost_spent() {

  local time_file=$1
  local total_cost=0
  while IFS=":" read -r instance_type time_sec; do
    rate=${instance_rates[$instance_type]}
    h=$((time_sec/3600))
    inst_cost=$(echo "$h*$rate" | bc)
    total_cost=$(echo "${total_cost}+${inst_cost}" | bc)
  done < $time_file
  echo $total_cost
}

# *****************************************************************************
# Function: get_pl_cost_code
# Purpose : Returns pipeline cost code.
# Usage   : get_pl_cost_code <pipeline name>
# *****************************************************************************
function get_pl_cost_code() {
 local pl_name="$1"
 echo ${PL_CODE[$pl_name]}
}

# *****************************************************************************
# Function: get_pl_name
# Purpose : Returns pipeline name.
# Usage   : get_pl_name <pipeline code>
# *****************************************************************************
function get_pl_name() {
 local pl_code="$1"
 for i in "${!PL_CODE[@]}"; do
  if [[ "${PL_CODE[$i]}" == "$pl_code" ]]; then
   pl_name="$i"
  fi
 done
 echo $pl_name
}

# *****************************************************************************
# Function: ci_report_date
# Purpose : Gets the date for file to be downloaded from Google Cloud Storage.
# Usage   : ci_report_date <Number of days>
# *****************************************************************************
function ci_report_date() {
 local days=$1
 tmp_arr=( $(gsutil ls gs://ci-bucket/* | grep ci-report | grep '.\{50\}' | tail -$days ) )
 report_date=${tmp_arr[0]##*_}
 report_date=${report_date%.*}
 echo $report_date
}

# *********************************************************************************
# Function: download_ci_report
# Purpose : Downloads file (ci-report) of specified date from Google Cloud Storage.
# Usage   : ci_report_date <Number of days>
# *********************************************************************************
function download_ci_report() {
  local date=$1
  local path=$2
  #Check if the report already exists so that the script uses existing report. Othewise
  #download from Google cloud storage.
  existing_file="${path}/ci-report_303028489312_${date}.csv"
  if [[ ! -e "$existing_file" ]]; then
    file=$(gsutil ls gs://ci-bucket/ci-report* | grep ${date})
    file=${file##*/}
    gsutil cp gs://ci-bucket/${file} . &> /dev/null
    mv $file $path
    echo "${path}$file"
  else
    echo "$existing_file"
  fi
}

# ***********************************************************************************************************
# Function: extract_pattern
# Purpose : Extracts the lines from specified file according to patterns supplied.
# Usage   : extract_pattern <pipeline code> <user name> <path to ci-report> <name of output file> <workspace>
# ***********************************************************************************************************
function extract_pattern() {
 local pl_code=$1
 local filepath=$2
 local newname=$3
 local workspace=$4
 local user=$5
 #Added this check to ommit pl_code as search criteria when only user is given. This will count the lines
 #where pipeline info was included in the instance name.
 if [[ -n "$pl_code" && "$pl_code" != "all" ]]; then
  grep "$pl_code" $filepath > tmp_file
 else
  cat $filepath > tmp_file
 fi
 if [[ -n "$user" ]]; then
  grep "$user" tmp_file > tmp_file1 || true
  grep Vmimage tmp_file1 > $workspace$newname || true
 elif [[ -z "$user" || "$user" == "all" ]]; then
  grep Vmimage tmp_file > $workspace$newname || true
 fi

 rm tmp_file*
 echo "$workspace$newname"
}

# ***********************************************************************************************************
# Function: convertsecs
# Purpose : converts seconds into hour:minutes:seconds format
# Usage   : convertsecs <time in seconds>
# ***********************************************************************************************************
function convertsecs() {
  local time=$1
    h=$(($time/3600))
    m=$((($time/60)%60))
    printf "%02d:%02d" $h $m
    # s=$((${time}%60))
    # printf "$h:$m"
}

# ***********************************************************************************************************
# Function: time_run
# Purpose : Extracts the running time from the provided file and converting into hours:minutes:seconds format
# Usage   : time_run <file containing time in seconds of an instance>
# ***********************************************************************************************************
function time_run(){
  local time_file=$1
  local time_total=0
  while IFS=":" read -r instance_type time_sec; do
    time_total=$(echo "${time_total}+${time_sec}" | bc -l )
    ttime=$(convertsecs $time_total)
  done < $time_file
  echo $ttime
}

# ***********************************************************************************************************
# Function: extract_for_all_pipelines
# Purpose : Extracts the usage of all pipelines and writes them to the final cost report
# Usage   : extract_for_all_pipelines <workspace> <path to ci report>
# ***********************************************************************************************************
function extrat_for_all_pipelines() {
  local workspace=$1
  local filepath=$2
  format=" %05.2f                     %-30s %-22s\n"
  for pl in "${!PL_CODE[@]}"; do
    code=$(get_pl_cost_code $pl)
    pl_code="\-p-${code}-"
    grep "$pl_code" "$filepath" > "${workspace}tmp_file_all_pipelines" || true
    grep "Vmimage" "${workspace}tmp_file_all_pipelines" > "${workspace}final_file_all_${code}" || true
    total_time=$(get_time_spent "${workspace}final_file_all_${code}" "$WORKSPACE" "$code")
    local total_cost=0
    local time_total=0
    while IFS=":" read -r instance_type time_sec; do
      rate=${instance_rates[$instance_type]}
      time_total=$(echo "${time_total}+${time_sec}" | bc -l )
      h=$(($time_sec/3600))
      ttime=$(convertsecs $time_total)
      inst_cost=$(echo "$h*$rate" | bc -l)
      total_cost=$(echo "$total_cost+$inst_cost" | bc -l )
    done < $total_time
    printf "$format" "$total_cost" "$ttime" "$pl" >> ${WORKSPACE}xcost_final_report
  done
  cat ${WORKSPACE}xcost_final_report | sort -k1 -n -r >> ${WORKSPACE}cost_final_report
  echo "" >> ${WORKSPACE}cost_final_report

  rm -rf ${WORKSPACE}xcost_final_report
  rm -rf ${workspace}final*
  rm -rf ${workspace}tmp*
}

# ***********************************************************************************************************
# Function: extract_for_all_users
# Purpose : Extracts the usage for all users and write to final cost report
# Usage   : extract_for_all_users <ci report> <output file> <workspace> <name of user>
# ***********************************************************************************************************
function extract_for_all_users() {
  local report_file=$1
  local output_file=$2
  local workspace=$3
  local user_all=$4
  local PIPELINE_CODE=""
  grep Vmimage $report_file >> ${workspace}all_users_usage
  user_list=$(get_users_list ${workspace}all_users_usage $workspace)
  while read name; do
    extracted_report=$(extract_pattern "$PIPELINE_CODE" "$report_file" "$output_file" "$workspace" "$name")
    total_time=$(get_time_spent "$extracted_report" "$workspace" "$name")
    local total_cost=0
    local time_total=0
    while IFS=":" read -r instance_type time_sec; do
      rate=${instance_rates[$instance_type]}
      time_total=$(echo "${time_total}+${time_sec}" | bc -l )
      h=$(($time_sec/3600))
      ttime=$(convertsecs $time_total)
      inst_cost=$(echo "$h*$rate" | bc -l)
      total_cost=$(echo "${total_cost}+${inst_cost}" | bc -l )
    done < $total_time
    printf "$format" "$total_cost" "$ttime" "$name" >> ${WORKSPACE}xcost_final_report
  done < $user_list
  cat ${WORKSPACE}xcost_final_report | sort -k1 -n -r >> ${WORKSPACE}cost_final_report

  rm ${workspace}tmp*
  rm ${workspace}xcost_final_report
  rm ${workspace}all*
  rm ${workspace}uniq_users_file.txt
}

# *****************************************************************************
# Function: get_num_of_days
# Purpose : Takes time duration and returns number of days accordingly.
# Usage   : get_num_of_days <duration>
# *****************************************************************************
function get_num_of_days() {
 local duration="$1"
 local num_of_days
 case $duration in
  day)
   num_of_days=1
   ;;
  week)
   num_of_days=7
   ;;
  month)
   num_of_days=30
   ;;
  *)
   echo "Invalid input!"
   exit 1
 esac
 echo $num_of_days
}

# *****************************************************************************
# Function: get_users_list
# Purpose : To get unique users list from ci-report
# Usage   : get_users_list<ci-report path> <workspace>
# *****************************************************************************
function get_users_list() {
 local filepath="$1"
 local workspace="$2"
 cat /dev/null > ${workspace}uniq_users_file.txt
 grep Vmimage $filepath  | cut -d',' -f 5 | cut -d '/' -f 11 | cut -d '-' -f 1 | sort -u > "${workspace}"uniq_users_file.txt
 echo "${workspace}uniq_users_file.txt"
}

# *****************************************************************************
# Function: get_report
# Purpose : To get the ci report for the specified day or date mentioned.
# Usage   : get_report <day> date>
# *****************************************************************************
function get_report() {
  local WORKSPACE=$1
  local day=$2
  local USER_DATE=$3

  #Check whether user has entered a particular date. Otherwise generate date for each day in given duration.
  if [[ -z "$USER_DATE" ]]; then
    DATE=$(ci_report_date "$day")
  else
    #Convert date string entered by user to GNU date format to verify format.
    DATE=$(date "+%Y%m%d" -d $USER_DATE)
  fi
  #Check if the report already exists so that the script uses existing report. Othewise
  #download from Google cloud storage.
  existing_file="${WORKSPACE}ci-report_303028489312_${DATE}.csv"

  if [[ ! -e $existing_file ]]; then
    downloaded_report=$(download_ci_report "$DATE" "${WORKSPACE}")
  else
    downloaded_report=$existing_file
  fi
  downloaded_report=$existing_file
  echo $downloaded_report
}