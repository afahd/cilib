#!/bin/bash -e
export PATH=@CMAKE_BINARY_DIR@/:/opt/pg/scripts:$PATH
. gc_helpers.sh
if [ -f /home/$USER/.aurora.conf ]; then
    . aurora_utils.sh
fi


# *****************************************************************************
# Function: check_parameters
# Purpose : Checks if the number of parameters are equal/greater than a number.
# Usage   : check_parameters <parameters-passed> <value to check against>
# Prereq  :
# *****************************************************************************
function check_parameters() {
  local ARGUMENTS_REQUIRED=${@: -1}
  #Need to add one argument since 'ARGUMENTS_REQUIRED' is also an argument
  ARGUMENTS_REQUIRED=$(($ARGUMENTS_REQUIRED+1))
  if [ "$#" -lt $ARGUMENTS_REQUIRED ]; then
    echo "Wrong number of arguments"
    show_help
    exit 1
  fi
}

function show_help() {
    cat << ENDHELP
init                        : Setup aurora environment

build <Gerrit-RefSpec> <Project> <Branch>
                      : Build a new image with given COMMIT-ID/TAG/LOCAL-CHANGES.
build <Gerrit-RefSpec> <Project> <Branch> --continue
                      : --continue option will resume the script from the point where it
                        stopped (because of broken ssh connection or simply because you powered-off
                        your machine).
                        It is also useful in case script hits some failures. Rather than running
                        whole script from scratch, --continue switch will make sure to run only those
                        steps which had hit failures or had not been run at all.

run <Build ID> <Test Script>
                      :  Run test script on cloud instance with aurora BUILD-ID.
run <Build ID> <Test Script> --continue <RUNID>
                      : --continue option will resume the script from the point where it
                        stopped (because of broken ssh connection or simply because you powered-off
                        your machine).
                        It is also useful in case script hits some failures. Rather than running
                        whole script from scratch, --continue switch will make sure to run only those
                        steps which had hit failures or had not been run at all.
                        <RUNID> is the unique 12 digit identifier for your specific run (e.g e992a1fffaf8).
                        It is being printed out on screen immediately after you kick off the "aurora run"
                        It is part of your run-instance name as well [aurora ls instances].

upload <Instance Name> <File To Upload> <Destination Path>
                      : Upload some local file to docker container.

download <Instance Name> <Location of File to download> <Path where you need to keep>
                      : Download file from docker container to local machine.

ls instance
                      : List all cloud instances currently running by user

ls snapshots
                      : List all cloud snapshots currently running by user

delete instances <regex> <-f, --force>
                      : Deletes the instance specified

delete snapshots <regex> <-f, --force>
                      : Deletes the snapshots specified

login <instance name>
                      : Login to the specified instance
ENDHELP
}

case $1 in
    --help)
        show_help
      ;;
    init)
      check_parameters $@ 1
      init_id
      ;;
    ls)
      check_parameters $@ 2
      if [[ $2 == "instances" ]] ; then
        list_instances
      elif [[ $2 == "snapshots" ]] ; then
        list_snapshots
      else
        echo "ERROR: invalid second argument $2: It can be either 'instances' or 'snapshots'"
      fi
      ;;
    delete)
      check_parameters $@ 3
      if [[ $2 == "instances" ]] ; then
        delete_instances ${3} ${4}
      elif [[ $2 == "snapshots" ]] ; then
        delete_snapshots ${3} ${4}
      else
        echo "ERROR: invalid second argument $2: It can be either 'instances' or 'snapshots'"
      fi

      ;;
    login)
      check_parameters $@ 2
      login_instance ${2}
      ;;
    build)
      check_parameters $@ 4
      run_aurora_build $2 $3 $4 $5
      ;;
    run)
      check_parameters $@ 3
      run_aurora_run $2 $3 $4 $5
      ;;
    upload)
      check_parameters $@ 4
      upload_to_docker ${2} ${3} ${4}
    ;;
    download)
      check_parameters $@ 4
      download_from_docker ${2} ${3} ${4}
    ;;
    *)
        echo "USAGE:"
        show_help
    ;;
esac
