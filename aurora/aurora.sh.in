#!/bin/bash -e
set -e
export PATH=@CMAKE_BINARY_DIR@/:/opt/pg/scripts:$PATH
. gc_helpers.sh
source help.sh
if [ $1 != "init" ]; then
    . aurora_utils.sh
fi


# *****************************************************************************
# Function: check_parameters
# Purpose : Checks if the number of parameters are equal/greater than a number.
# Usage   : check_parameters <parameters-passed> <value to check against>
# Prereq  :
# *****************************************************************************
function check_parameters() {
  local ARGUMENTS_REQUIRED=${@: -1}
  #Need to add one argument since 'ARGUMENTS_REQUIRED' is also an argument
  ARGUMENTS_REQUIRED=$(($ARGUMENTS_REQUIRED+1))
  if [ "$#" -lt $ARGUMENTS_REQUIRED ]; then
    echo "Wrong number of arguments"
    show_help
    exit 1
  fi
}

# read the options
TEMP=`getopt -o r:p:b:l:s:cn:i:f:d:e:x:hk --long refspec:,proj:,branch:,buildid:,script:,\continue,runid:,instance:,file:,dest:,entity:,regex:,help,keep-running,skip-automaton-init -n 'aurora.sh' -- "$@"`
eval set -- "$TEMP"

CONTINUE=""
KEEP_RUNNING=0
SKIP_AUTOMATON_INIT=0
# extract options and their arguments into variables.
while true ; do
  case "$1" in
    -r|--refspec)
      REFSPEC=$2 ; shift 2 ;;
    -p|--proj)
      PROJ=$2 ; shift 2 ;;
    -b|--branch)
      BRANCH=$2 ; shift 2 ;;
    -l|--buildid)
      BUILDID=$2 ; shift 2 ;;
    -s|--script)
      SCRIPT=$2 ; shift 2 ;;
    -c|--continue)
      CONTINUE="--continue" ; shift 1 ;;
    -n|--runid)
      RUNID=$2 ; shift 2 ;;
    -i|--instance)
      INSTANCE=$2 ; shift 2 ;;
    -f|--file)
      FILE=$2 ; shift 2 ;;
    -d|--dest)
      DEST=$2 ; shift 2 ;;
    -e|--entity)
      ENTITY=$2 ; shift 2 ;;
    -x|--regex)
      REGEX=$2 ; shift 2 ;;
    -h|--help)
      show_help
      exit 0
      shift ;;
    -k|--keep-running)
      KEEP_RUNNING=1 ; shift ;;
    --skip-automaton-init)
      SKIP_AUTOMATON_INIT=1 ; shift ;;
    --) shift ; break ;;
    *) exit 1 ;;
  esac
done

case $1 in
    init)
      init_id
      ;;
    ls)
      if [[ $2 != "" ]] ; then 
        show_ls_help
      elif [[ $ENTITY == "instances" || $ENTITY == "" ]] ; then
        list_instances
      elif [[ $ENTITY == "snapshots" ]] ; then
        list_snapshots
      else
        #echo "ERROR: invalid entity: It can be either 'instances' or 'snapshots'"
        show_ls_help
      fi
      ;;
    delete)
      if [[ $2 != "" || ${REGEX} == "" ]] ; then 
        show_delete_help
      elif [[ $ENTITY == "instances"  || $ENTITY == "" ]] ; then
        delete_instances ${REGEX} ${4}
      elif [[ $ENTITY == "snapshots" ]] ; then
        delete_snapshots ${REGEX} ${4}
      else
        show_delete_help
        #echo "ERROR: invalid second argument $2: It can be either 'instances' or 'snapshots'"
      fi
      ;;
    login)
      login_instance ${INSTANCE}
      ;;
    build)
      if [[ $2 == "help" ]] ; then
        show_build_help
      else
        run_aurora_build $REFSPEC $PROJ $BRANCH $CONTINUE
      fi
      ;;
    run)
      if [[ $2 == "help" ]] ; then
        show_run_help
      else
        run_aurora_run $BUILDID $SCRIPT $KEEP_RUNNING $SKIP_AUTOMATON_INIT $CONTINUE $RUNID
      fi
      ;;
    upload)
      upload_to_docker ${INSTANCE} ${FILE} ${DEST}
    ;;
    download)
      download_from_docker ${INSTANCE} ${FILE} ${DEST}
    ;;
    *)
        echo "USAGE:"
        show_help
    ;;
esac
