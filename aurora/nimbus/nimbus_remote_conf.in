#!/bin/bash
#[TODO{Sidra}:INFRA-1072}]

set -x
NODE_TYPE=$1
DIR_IPS=$2

if [[ -z $NODE_TYPE ]]; then
  echo "NODE_TYPE cannot be empty. Please provide \"DIR\", \"EDGE\" or \"WORKLOAD\""
  exit 1
fi

if [[ -z $DIR_IPS ]]; then
  echo "DIR_IPS cannot be empty. Please provide a comma separated list"
  exit 1
fi

if [[ "$NODE_TYPE" = "WORKLOAD" ]]; then
  SE_IPS=$3
  if [[ -z $SE_IPS ]]; then
    echo "SE_IPS cannot be empty. Please provide a comma separated list"
    exit 1
  fi
else
  VIRTUAL_IP=$3
  if [[ -z $VIRTUAL_IP ]]; then
    echo "VIRTUAL_IP cannot be empty. Please provide an ip address. For Edge type node use rest ip address"
    exit 1
  fi
fi

MW_IP=$4
echo "===MW_IP=${MW_IP}==="

# WORKLOAD ONLY
if [[ "$NODE_TYPE" = "WORKLOAD" ]]; then
  #parsing director IPs
  space_separated_dir=$(echo $DIR_IPS | tr "," " ")
  line_separated_dir=$(echo $DIR_IPS | tr "," "\n")
  dir_array=($space_separated_dir)
  echo "$space_separated_dir" > /home/plumgrid/a.nos.list
  echo "$line_separated_dir" > /home/plumgrid/gcloud_nos.list

  #parsing edges IPs
  space_separated_se=$(echo $SE_IPS | tr "," " ")
  line_separated_se=$(echo $SE_IPS | tr "," "\n")
  se_array=($space_separated_se)
  echo "$space_separated_se" > /home/plumgrid/a.se.list
  echo "$line_separated_se" > /home/plumgrid/gcloud_se.list

  /opt/pg/systest/lxc/generate_lxc_files.py --nos /home/plumgrid/a.nos.list --se /home/plumgrid/a.se.list --out /home/plumgrid/gcloud
  cp /home/plumgrid/gcloud_nos.list /tmp
  cp /home/plumgrid/gcloud_se.list /tmp
  cp /home/plumgrid/gcloud.resource.json /tmp
  /opt/pg/test/scripts/generate_physical_file.py --nos ${#dir_array[@]} --se ${#se_array[@]} --in /tmp/gcloud --out /tmp/gcloud --converged
  sed -i 's/"platform" : "lxc"/"platform" : "aws"/g' /tmp/gcloud.resource.json

  #Backing up files into /home/plumgrid to avoid the failing scenario mentioned in ticket TEST-2263
  cp --force /tmp/gcloud.resource.json /home/plumgrid
  cp --force /tmp/gcloud.physical.json /home/plumgrid

fi

# DIR ONLY
if [[ "$NODE_TYPE" = "DIR" ]]; then
  # NGINX  & SAL conf
  if [ ! -z "$MW_IP" ]; then
    #add mw argument
    mw_arg="--middleware_ip=${MW_IP}"
  fi
  sudo /opt/pg/test/scripts/generate_nginx_keepalived_configs.py --nos_ips="${DIR_IPS}" --virtual_ip="${VIRTUAL_IP}" $mw_arg --out_loc=/tmp
  sudo cp -rf /tmp/default.conf /opt/pg/sal/nginx/conf.d/.
  sudo cp -rf /opt/pg/sal/etc/plumgrid-sal.conf /etc/init/.
  sudo cp -rf /opt/pg/sal/nginx/etc/nginx.conf /etc/init/.
  sudo rm -rf /etc/keepalived/keepalived.conf

  # PLUMgrid upstart conf
  sudo cp -rf /opt/pg/etc/init/plumgrid.conf /etc/init/.
  sudo sed -i "s/^env start_plumgrid=no/env start_plumgrid=yes/g" /etc/init/plumgrid.conf
  sudo sed -i "s/^env plumgrid_ip=localhost/env plumgrid_ip=$DIR_IPS/g" /etc/init/plumgrid.conf
  sudo sed -i "s/^env plumgrid_port=8000/env plumgrid_port=8001/g" /etc/init/plumgrid.conf
  sudo sed -i "s/^env mgmt_dev=fabric/env mgmt_dev=eth0/g" /etc/init/plumgrid.conf

  sudo echo "start_plumgrid=yes" > /opt/pg/etc/plumgrid.conf

  sudo cp -rf /opt/pg/etc/init/plumgrid-logger.conf /etc/init/.
  sudo sed -i "s/^env mgmt_dev=fabric/env mgmt_dev=eth0/g" /etc/init/plumgrid-logger.conf

  sudo cat >> /etc/logrotate.d/plumgrid-trace_collector <<DELIM__
# PLUMgrid logrotate configuration file
# Copyright 2013-2014 PLUMgrid Inc.
# All rights reserved

compress

/opt/pg/log/trace_collector.12349.log {
    rotate 500000
    size 100M
    postrotate
        /usr/bin/killall -HUP launch_trace_collector || true
    endscript
}
DELIM__

  sudo cp -rf /opt/pg/etc/init/plumgrid-config.conf /etc/init/.

  sudo mkdir -p /opt/pg/db
  sudo chown -R postgres:postgres /opt/pg/db
  postgres_pid_cnt=$(pgrep -c postgre)
  if [[ "$postgres_pid_cnt" != "0" ]]; then
    sudo service postgresql stop
  fi

  sudo modprobe bonding

  #Configuration of blocking timeouts for Falcon execution
  sed -i "/.*Deactivating server.*/{n;s/.*/      --servers:set(ip, 0)/g}" /opt/pg/sal/lualib/lb.lua

  #Configuration of GC_Thresholds to support GC timeouts for Falcon
  echo 10 | sudo tee --append /proc/sys/net/ipv4/neigh/default/gc_thresh1 &&  echo 150000 | sudo tee --append /proc/sys/net/ipv4/neigh/default/gc_thresh2 && echo 150000 | sudo  tee --append  /proc/sys/net/ipv4/neigh/default/gc_thresh3
  echo "Done configuring workaround (a.k.a. way-around, walk-around, step-around) for Virtual IPs & scale on Directors."

fi

# EDGE_ONLY
if [[ "$NODE_TYPE" = "EDGE" ]]; then
  sudo cp -rf /opt/pg/etc/init/plumgrid-kernel-module.conf /etc/init/.

  sudo cp -rf /opt/pg/etc/init/plumgrid-iovisor.conf /etc/init/.
  sudo sed -i "s/^env start_plumgrid_iovisor=no/env start_plumgrid_iovisor=yes/g" /etc/init/plumgrid-iovisor.conf
  sudo sed -i "s/^env mgmt_dev=fabric/env mgmt_dev=eth0/g" /etc/init/plumgrid-iovisor.conf

  if [[ -f /opt/pg/etc/ifcs.conf ]]; then
    sudo rm -rf /opt/pg/etc/ifcs.conf
  fi
  sudo echo "eth0 = fabric_core host" > /opt/pg/etc/ifcs.conf

  if [[ -f /opt/pg/etc/plumgrid.conf ]]; then
    sudo rm -rf /opt/pg/etc/plumgrid.conf
  fi
  sudo cat > /opt/pg/etc/plumgrid.conf <<DELIM__
plumgrid_ip=$DIR_IPS
plumgrid_port=8001
mgmt_dev=eth0
label=`hostname`
plumgrid_rest_addr=$VIRTUAL_IP:9180
fabric_mode=host
start_plumgrid_iovisor=yes
start_plumgrid=no
DELIM__

fi

if [[ "$NODE_TYPE" != "WORKLOAD" ]]; then
  # PITAD upstart conf
  sudo cp -rf /opt/pg/etc/init/pitad.conf /etc/init/.
  sudo sed -i "s/^setuid plumgrid/# setuid plumgrid/g" /etc/init/pitad.conf
  sudo sed -i "s/^setgid plumgrid/# setgid plumgrid/g" /etc/init/pitad.conf
  sudo sed -i "s/--debug/--debug --platform aws/g" /etc/init/pitad.conf

  # rsyslog conf for forwarding logs to middleware
  if [ ! -z "$MW_IP" ]; then
    echo "Writing rsyslog config file"
    str=$'$template ls_json,"{%timestamp:::date-rfc3339,jsonf:@timestamp%,%source:::jsonf:@source_host%,%msg:::json%}"\n:syslogtag,isequal,"pg:" @'$MW_IP':6000;ls_json'
    sudo echo "$str" > /etc/rsyslog.d/pg-mw.conf
    sudo service rsyslog restart
  fi

  if [[ ! -d /mnt/run ]]; then
    sudo mkdir /mnt/run
  fi

  update-rc.d -f apache2 remove
  sudo service apache2 status | grep -q "is NOT running"
  if [[ $? -ne 0 ]]; then
    sudo service apache2 stop
  fi

  sudo service pitad status | grep -q "start/running"
  if [[ $? -eq 0 ]]; then
    sudo service pitad stop
  fi
  sudo service pitad start
fi

