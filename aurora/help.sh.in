#!/bin/bash

function show_aurora_help() {
    cat << AURORAHELP

USAGE: aurora <COMMAND> ...
COMMAND:
  init                Setup aurora environment.
  build               Build a new image
  run                 Run test script on cloud instance with aurora BUILD-ID.
  pipeline            Run smoke/extended/unstable/pgui-smoke/omni pipeline for some particular commit.
  debug-test          Run multiple iterations of specified tests on several instances.
  hunt                Search for commit which destabilize test cases.

  download            Download file cloud instance to local machine.
  upload              Upload file to cloud instance from local machine.
  ls                  List all currently active cloud instances or snapshots
  cp                  Create a copy of other user's build.
  rm                  Deletes the ENTITY containing value in REGEX
  login               Login to the specified INSTANCE
  load                Shows the resources used by all users.

To Get more specific help for each command, you can run "aurora <COMMAND> help"

AURORAHELP
}
function show_build_help() {
    cat << BUILDHELP

USAGE: aurora build -p <PROJECT> -b <BRANCH> [OPTIONS]
       Build a new image with given COMMIT-ID/TAG/LOCAL-CHANGES.

Required Arguments:
  -p, --proj          Project with which commit belongs e.g. alps, pg_ui, pg_cli
  -b, --branch        Branch on which you want to test e.g. master, stable_4_0

Optional Arguments:
  -W, --WORKSPACE     Set the workspace where all the logs will be stored.
  -r, --refspec       Gerrit RefSpec or dev branch. e.g. refs/changes/20/11020/1 or bob_dev.
                      Not specifying a refspec will build an instance without any changes
                      on the specified branch.
  -C, --continue      --continue option will resume the script from the point where it
                      stopped (because of broken ssh connection or simply because you powered-off
                      your machine).
                      It is also useful in case script hits some failures. Rather than running
                      whole script from scratch, --continue switch will make sure to run only those
                      steps which had hit failures or had not been run at all.
  -K, --keep-running  Instance will be left running after aurora run ends.
  -t, --tag           Add a tag to the instance name. Useful if multiple build instances for the
                      same refspec are required.
  -s, --script        Script to run to setup the build enviroment. By defult build-all.sh is ran.
BUILDHELP
}

function show_run_help() {
    cat << RUNHELP

USAGE: aurora run -l <BUILD-ID> -s <Script Path> [OPTIONS]
       Run test script on cloud instance with aurora BUILD-ID.

Required Arguments:
  -l, --buildid         Build on which you want to run test.

Optional Arguments:
  -W, --WORKSPACE       Set the workspace where all the logs will be stored.
                        Logs will be place in ${WORKSPACE}/logs
  -s, --script          Test script which you want to run (please see sample_test1.sh to get further idea)
  -K, --keep-running    Instance will be left running after aurora run ends.
  -C, --continue        --continue option will resume the script from the point where it
                        stopped (because of broken ssh connection or simply because you powered-off
                        your machine).
                        It is also useful in case script hits some failures. Rather than running
                        whole script from scratch, --continue switch will make sure to run only those
                        steps which had hit failures or had not been run at all.
  -n, --runid           To use along with --continue:
                        12 digit identifier for specific run (e.g e992a1fffaf8).
                        It is being printed out on screen immediately after you kick off the "aurora run"
                        first time.
                        It is part of your run-instance name as well [aurora ls instances].
  -t, --tag             Add a tag to the instance name.
  -c, --commit          SHA-1 HASH of the commit to apply
                        Supplying this arguments enables the transfer of local changes to the cloud instance.
                        The changes can be specified by the SHA-1 hash of a local commit.
                        All changes up to that commit are applied on the instance on the corresponding
                        branch.
  -a, --alps-path       Specify the path to the local alps repository
                        Default is /home/${USER}/work/alps
  -S, --src_log_dir     Path to the remote location to download the logs from. Default is /opt/pg/log
RUNHELP
}

function show_init_help() {
   cat << INITHELP

USAGE: aurora init
       Setup aurora environment.

Setup will ask following questions
enter your gerrid id     : mclarck (only name, NO need to give @plumgrid.com)
enter your plumgrid email: clarck@plumgrid.com
INITHELP
}

function show_upload_help() {
   cat << HELP

USAGE: aurora upload <INSTANCE-NAME> <UPLOAD-FILE> <DESTINATION>
       Download file from cloud instance to local machine.

<INSTANCE-NAME>       Name of the instance to upload to.
                      To see a list of available instances use "aurora ls instances"
<UPLOAD-FILE>         Path to the local file to upload
<DESTINATION>         Path to the remote destination.
HELP
}

function show_download_help() {
   cat << HELP
USAGE: aurora download <INSTANCE-NAME> <DOWNLOAD-FILE> <DESTINATION>
       Download file from cloud instance to local machine.

<INSTANCE-NAME>       Name of the instance to download from.
                      To see a list of available instances use "aurora ls instances"
<DOWNLOAD-FILE>       Path to the remote file to download
<DESTINATION>         Destination path for download.
HELP
}

function show_ls_help() {
   cat << HELP
USAGE: aurora ls <ENTITY>
       List all currently active cloud instances or snapshots

<ENTITY>              Value can be:
                      instances: Lists all the instances running.
                      build: Lists the build-ids and their corresponding RefSpec.
                             To see "builds" created by other user, give their
                             email id as parameter. e.g. "aurora ls build alir"
                      run: Lists the run instances and the corresponding build-ids.
                      disks: Lists the disks not attached to instances.
                      Default is instances.
HELP
}

function show_rm_help() {
   cat << HELP
USAGE: aurora rm <ENTITY> <REGEX> [-f --force]
       Deletes the ENTITY containing value in REGEX

<ENTITY>              Value can be:
                      "instances", "build","run" and "disks"
<REGEX>               Regex to match. e.g "run" will delete all instances or snapshots
                      having 'run' as part of name.
Options:
-f, --force           Suppresses user confirmation
HELP
}

function show_cp_help() {
   cat << HELP

USAGE: aurora cp <ENTITY> <SRC_USER_EMAIL> <ENTITIY-NAME>
       Copy the entitiy created by another user

  ENTITY              "build" is only supported value right now.
  SRC_USER_EMAIL      PLUMgrid email-id of user whose entity you want to copy.
                      "@plumgrid.com" part is NOT needed.
  ENTITY_NAME         NAME of the entity which you want to copy.

e.g "aurora cp build ahsanr bld-stable-4-0"
NOTE: To see "builds" created by other user, give their email id as parameter.
"aurora ls build alir"

HELP
}
function show_login_help() {
   cat << HELP
USAGE: aurora login <INSTANCE-NAME>
       Login to the specified INSTANCE

<INSTANCE-NAME>       Name of the instance to login.
                      To see a list of available instances use "aurora ls instances"
HELP
}

function show_pl_help() {
    cat << HELP
USAGE: aurora pipeline -l <BUILD-ID> [OPTIONS]
       Run smoke/extended/unstable/pgui-smoke/omni pipeline for some particular commit

Required Arguments:
-l, --buildid         Build-ID against which you want to run pipeline

Optional Arguments:
-P, --pipeline        [OPTIONAL] The pipeline which you want to run.
                      Possible values are "smoke", "extended", "unstable", "pgui-smoke", "omni" "automaton" and "automaton-longevity".
                      Default is 'smoke'.
-b, --branch          [OPTIONAL] The branch that you want to run your pipeline on. Currently this feature is only available for omni
                      pipeline. Possible value for this flag is "stable_4_0". If you do not use this the default value would be taken as "master"
-W, --WORKSPACE       [OPTIONAL]Set the workspace where all the logs will be stored.
-K, --keep-running    [OPTIONAL] Instance will be left running after aurora run ends.
-i, --test_iterations [OPTIONAL] Run the pipeline for the specified number of iterations.
HELP
}
function show_set_max_instances_help() {
    cat << HELP
USAGE: aurora set_max_instances <MAX-INSTANCES>
       Change the number of concurrent instances allowed.

<MAX_INSTANCES>       Max number of instances allowed
HELP
}

function show_load_help() {
    cat << HELP
USAGE: aurora load
                      Shows the number of running instances, disk space used and
                      the number of snapshots for every user.
HELP
}

function show_debug_test_help() {
    cat << HELP

USAGE: aurora debug-test -l <BUILD-ID> -s <TEST-SCRIPT> [OPTIONS]
       Runs the tests specified in the test-script on multiple instances
       for multiple iterations. Optionally can also transfer local changes
       to the cloud instance.

Required Arguments:
  -l, --build-id              Build on which to run the tests.
  -s, --script                Path to a local file containing the names of tests to run.
                              Currently only non-automaton tests are supported.

Optional Arguments:
  -W, --WORKSPACE             Set the workspace where all the logs will be stored.
  -K, --keep-running          Instance will be left running after aurora run ends.
  -i, --test_iterations       Specify the number of iterations for the tests.
                              Default=1
  -n, --num_instances         Run concurrently on the specified number of instances.
                              Default=1
  -c, --local_commit          SHA-1 HASH of the local commit to apply
                              Supplying this arguments enables the transfer of local changes to the cloud instance.
                              The changes can be specified by the SHA-1 hash of a local commit.
                              All changes up to that commit are applied on the instance on the corresponding
                              branch.
  -e, --existing_commit_hash  SHA-1 HASH of some already existing gerrit commit.
  -a, --alps-path             Optionally specify the path to the local alps repository
                              Default is /home/${USER}/work/alps

EXAMPLE:
  aurora debug-test -l bld-stable-4-0 -s /home/plumgrid/test1.txt -c c4c2dd54897c4f2c090a794c567ead550e9ff2f1
HELP
}

