#!/bin/bash -e
source aurora_infra_settings.conf
source gc_helpers.sh
source ~/.aurora.conf

if [ -z ${gerritid+x} ]; then
  echo "ERROR: gerritid has not been defined. Please make sure to run aurora init. Exiting"
  exit
fi

# ***********************************************************************************
# Function: upload_to_docker
# Purpose : Upload a file/folder from your local machine to Docker container
# Usage   : upload_to_docker <Cloud instance name where docker container is running>
#                            <Local file which needs to be uploaded>
#                            <>
# Prereq: Your laptop's key must be already in docker container before this operation
# Test function by giving relative path.
# ***********************************************************************************
function upload_to_docker() {
  local INSTANCE_NAME=$1
  local FILE=$2
  local DESTINATION=$3

  echo "** $INSTANCE_NAME $FILE $DESTINATION **"
  FILE_NAME="${FILE##*/}"
  scp -o "ProxyCommand ssh $COMM_IP nc ${INSTANCE_NAME} 22" -r -o StrictHostKeyChecking=no $FILE "${USER}@${INSTANCE_NAME}:/tmp/"
  ssh -o "ProxyCommand ssh $COMM_IP nc ${INSTANCE_NAME} 22" -tA -o ServerAliveInterval=5 ${USER}@${INSTANCE_NAME} "scp -r -o StrictHostKeyChecking=no /tmp/${FILE_NAME} plumgrid@\`cat local_docker_ip\`:$DESTINATION"
}

# *****************************************************************************
# Function: download_from_docker
# Purpose : Download a file/folder from docker container to your local machine.
# Usage   : download_from_docker <Cloud instance where docker container is running>
#                                <Location of file which needs to be downloaded>
#                                <Local machine's path where you need to download>
# Prereq: Your laptop's key must be already in docker container before this operation.
# *****************************************************************************
function download_from_docker() {
  INSTANCE_NAME=$1
  FILE=$2
  DESTINATION=$3

  FILE_NAME="${FILE##*/}"
  ssh  -o "ProxyCommand ssh $COMM_IP nc ${INSTANCE_NAME} 22" -tA -o ServerAliveInterval=5 ${USER}@${INSTANCE_NAME} "scp -r -o StrictHostKeyChecking=no plumgrid@\`cat local_docker_ip\`:$FILE /tmp/$FILE_NAME"
  scp -r -o "ProxyCommand ssh $COMM_IP nc ${INSTANCE_NAME} 22" -o StrictHostKeyChecking=no "${USER}@${INSTANCE_NAME}:/tmp/$FILE_NAME" ${DESTINATION}
}

# *****************************************************************************
# Function: list_instances
# Purpose : Lists the cloud instances currently running for the user.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_instances() {
  local file=$(mktemp /tmp/${gerritid}-instance-list-XXXXX)
  echo "Listing instances for the user:$gerritid_lower"
  gcloud compute instances list --regexp "${gerritid_lower}-.*" > ${file}
  sed -ie "s/${gerritid_lower}-//g" ${file}
  cat ${file}
  rm -f ${file}*
}

# *****************************************************************************
# Function: list_snapshots
# Purpose : Lists the cloud instances currently running for the user.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_snapshots() {
  local file=$(mktemp /tmp/${gerritid}-snapshot-list-XXXXX)

  echo "Listing instances for the user:$gerritid"
  gcloud compute snapshots list --regexp "${gerritid_lower}-.*" > ${file}
  sed -ie "s/${gerritid_lower}-//g" ${file}
  cat ${file}
  rm ${file}*
}

# *****************************************************************************
# Function: delete_instances
# Purpose : Deletes the cloud instances currently running for the user.
# Usage   : delete_user_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_instances() {
  local REGEX=".*$1.*"
  local user_instances=$(gcloud compute instances list --regexp "${REGEX}" | grep ${gerritid_lower} | cut -d ' ' -f 1)

  # TODO: Print message if no instance matches with given criteria and exit
  echo "The following instances will be permanently deleted: "
  for instance in $user_instances; do
    echo "$instance"
  done

  if [ "$2" != "-f" -a "$2" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  for instance in $user_instances; do
    gcloud compute instances delete $instance -q --delete-disks all
  done
}

# *****************************************************************************
# Function: delete_instances
# Purpose : Deletes the cloud instances currently running for the user.
# Usage   : delete_user_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_snapshots() {
  local REGEX=".*$1.*"
  local user_snapshots=$(gcloud compute snapshots list --regexp "${REGEX}" | grep ${gerritid_lower} | cut -d ' ' -f 1)

  echo "The following instances will be permanently deleted: "
  for snapshot in $user_snapshots; do
    echo "$snapshot"
  done

  if [ "$2" != "-f" -a "$2" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  for snapshot in $user_snapshots; do
    gcloud compute snapshots delete $snapshot -q
  done
}


# *****************************************************************************
# Function: login_instance
# Purpose : Logs into the insatance name provided.
# Usage   : login_instance <build-id>
# Prereq: The instance should exsist.
# *****************************************************************************
function login_instance() {
  local INSTANCE_NAME="${gerritid_lower}-$1"
  gcloud compute instances list ${INSTANCE_NAME} | grep "${INSTANCE_NAME}" || RESULT=$? &> /dev/null
  if [[ $RESULT -ne 0 ]];then
    echo "INSTANCE ${INSTANCE_NAME} does not exist"
    show_login_help
    exit 1
  fi
  run_cmd_docker_sshforwarding ${INSTANCE_NAME} "/bin/bash"
}

function run_aurora_build() {
  local REFSPEC=$1
  local PROJ=$2
  local BRANCH=$3
  local START_STEP=1
  local END_STEP=16
  local MOD_REFSPEC=$(echo "$REFSPEC" | tr / -)
  MOD_REFSPEC=${MOD_REFSPEC:13}
  local INSTANCE_NAME=${gerritid_lower}-bld-${MOD_REFSPEC}
  local step_rec_file=/tmp/${INSTANCE_NAME}-last-successful-step
  #Validate Inputs
  check_build_inputs $PROJ $REFSPEC $BRANCH
  # If "continue" switch has been given then do following steps
  #   a. Get the last successfully completed step.
  #   b. Start the build process from step next to last completed step.
  if [[ $4 == "--continue" ]] ; then
    # Get the last successfull step from /tmp/${INSTANCE_NAME}-last-successful-step
    LAST_SUCCESSFULL_STEP=( $(<${step_rec_file}) )
    START_STEP=$((LAST_SUCCESSFULL_STEP+1))
  fi
  aurora_build.sh -Q build -R ${START_STEP} -E ${END_STEP} -G ${REFSPEC} -P ${PROJ} -B ${BRANCH} -I ${INSTANCE_NAME}

  # Build process has been completed. Delete the file which was used to record the steps.
  rm -r ${step_rec_file}
}

function run_aurora_run() {
  local USER_BUILD_ID=$1
  local TEST_SCRIPT=$2
  local RUNID=$4
  local START_STEP=1
  local END_STEP=13
  local UUID=`uuidgen`
  local SUUID_="${UUID##*-}"
  SUUID="${SUUID_,,}"

  BUILD_ID=${gerritid_lower}-${USER_BUILD_ID}
  local INSTANCE_NAME=`echo ${BUILD_ID}-${SUUID} | sed 's/bld/run/'`
  local step_rec_file=/tmp/${INSTANCE_NAME}-last-successful-step
  #Validate Inputs
  check_run_inputs $BUILD_ID $TEST_SCRIPT
  # If "continue" switch has been given then do following steps
  #   a. Get the RUN-ID provided by user.
  #   b. Get the last successfully completed step.
  #   c. Start the run process from step next to last completed step.
  if [[ $3 == "--continue" ]] ; then
    # User must give the run-id(SUUID generated during first time execution of run process.)
    # along with continue such that we can know that which "aurora run" he needs to resume.
    # TODO: Exit if user does not give the run-id.
    if [ -z ${RUNID+x} ]; then
      echo "Please provide the RUN-ID which you want to continue e.g. f82ba2b78256"
      exit
    fi

    RUNID=$4
    INSTANCE_NAME=`echo ${BUILD_ID}-${RUNID} | sed 's/bld/run/'`
    local step_rec_file=/tmp/${INSTANCE_NAME}-last-successful-step
    LAST_SUCCESSFULL_STEP=( $(<${step_rec_file}) )
    START_STEP=$((LAST_SUCCESSFULL_STEP+1))
  fi
  aurora_run.sh -Q run -R ${START_STEP} -E ${END_STEP} -B ${BUILD_ID} -T ${TEST_SCRIPT} -U ${SUUID} -I ${INSTANCE_NAME}
}
