#!/bin/bash -e
source aurora_infra_settings.conf
source ~/.aurora.conf
source gc_helpers.sh

if [ -z ${gerritid+x} ]; then
  echo "ERROR: gerritid has not been defined. Please make sure to run aurora init. Exiting"
  exit
fi


function init_id() {
  conf_file="/home/$USER/.aurora.conf"
  echo "Please enter your gerrit id: "
  read gerritid
  echo "gerritid=${gerritid}" > ${conf_file}
  gcloud config set project $PROJECT
  gcloud config set compute/zone $ZONE
  gcloud config set compute/region $REGION
}
# ***********************************************************************************
# Function: upload_to_docker
# Purpose : Upload a file/folder from your local machine to Docker container
# Usage   : upload_to_docker <Cloud instance name where docker container is running>
#                            <Local file which needs to be uploaded>
#                            <>
# Prereq: Your laptop's key must be already in docker container before this operation
# Test function by giving relative path.
# ***********************************************************************************
function upload_to_docker() {
  local INSTANCE_NAME=$1
  local FILE=$2
  local DESTINATION=$3

  echo "** $INSTANCE_NAME $FILE $DESTINATION **"
  FILE_NAME="${FILE##*/}"
  gcloud compute copy-files $FILE "${USER}@${INSTANCE_NAME}:/tmp/"
  gcloud compute -q ssh  ${USER}@${INSTANCE_NAME} --ssh-flag='-tA' --ssh-flag="-o ServerAliveInterval=5" --command "scp -r -o StrictHostKeyChecking=no /tmp/${FILE_NAME} plumgrid@\`cat local_docker_ip\`:$DESTINATION"
}

# *****************************************************************************
# Function: download_from_docker
# Purpose : Download a file/folder from docker container to your local machine.
# Usage   : download_from_docker <Cloud instance where docker container is running>
#                                <Location of file which needs to be downloaded>
#                                <Local machine's path where you need to download>
# Prereq: Your laptop's key must be already in docker container before this operation.
# *****************************************************************************
function download_from_docker() {
  INSTANCE_NAME=$1
  FILE=$2
  DESTINATION=$3

  FILE_NAME="${FILE##*/}"
  gcloud compute -q ssh  ${USER}@${INSTANCE_NAME} --ssh-flag='-tA' --ssh-flag="-o ServerAliveInterval=5" --command "scp -r -o StrictHostKeyChecking=no plumgrid@\`cat local_docker_ip\`:$FILE /tmp/$FILE_NAME"
  gcloud compute copy-files "${USER}@${INSTANCE_NAME}:/tmp/$FILE_NAME" ${DESTINATION}
}

# *****************************************************************************
# Function: list_instances
# Purpose : Lists the cloud instances currently running for the user.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_instances() {
  local file=$(mktemp /tmp/${gerritid}-instance-list-XXXXX)

  echo "Listing instances for the user:$gerritid"
  gcloud compute instances list --regexp "$gerritid-.*" > ${file}
  sed -ie "s/${gerritid}-//g" ${file}
  cat ${file}
  rm ${file}
}

# *****************************************************************************
# Function: list_snapshots
# Purpose : Lists the cloud instances currently running for the user.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_snapshots() {
  local file=$(mktemp /tmp/${gerritid}-snapshot-list-XXXXX)

  echo "Listing instances for the user:$gerritid"
  gcloud compute snapshots list --regexp "$gerritid-.*" > ${file}
  sed -ie "s/${gerritid}-//g" ${file}
  cat ${file}
  rm ${file}
}

# *****************************************************************************
# Function: delete_instances
# Purpose : Deletes the cloud instances currently running for the user.
# Usage   : delete_user_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_instances() {
  local INSTANCE_NAME="${gerritid}-$1"
  local user_instances=$(gcloud compute instances list --regexp "${INSTANCE_NAME}.*" | grep $gerritid | cut -d ' ' -f 1)

  echo "The following instances will be permanently deleted: "
  for instance in $user_instances; do
    echo "$instance"
  done

  if [ "$1" != "-f" -a "$1" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  for instance in $user_instances; do
    gcloud compute instances delete $instance -q --delete-disks all
  done
}

# *****************************************************************************
# Function: delete_instances
# Purpose : Deletes the cloud instances currently running for the user.
# Usage   : delete_user_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_snapshots() {
  local SNAPSHOT_NAME="${gerritid}-$1"
  local user_snapshots=$(gcloud compute snapshots list --regexp "${SNAPSHOT_NAME}.*" | grep $gerritid | cut -d ' ' -f 1)

  echo "The following instances will be permanently deleted: "
  for snapshot in $user_snapshots; do
    echo "$snapshot"
  done

  if [ "$1" != "-f" -a "$1" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  for snapshot in $user_snapshots; do
    gcloud compute snapshots delete $snapshot -q
  done
}


# *****************************************************************************
# Function: login_instance
# Purpose : Logs into the insatance name provided.
# Usage   : login_instance <build-id>
# Prereq: The instance should exsist.
# *****************************************************************************
function login_instance() {
  local INSTANCE_NAME="${gerritid}-$1"
  run_cmd_docker ${INSTANCE_NAME} "/bin/bash"
}


