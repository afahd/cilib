#!/bin/bash -e
source aurora_infra_settings.conf
source gc_helpers.sh
source ~/.aurora.conf
source help.sh

if [[ -z ${gerritid+x} || -z ${emailid+x}  ]]; then
  echo "ERROR: gerritid or emailid has not been defined. Please make sure to run aurora init. Exiting"
  exit
fi

# ***********************************************************************************
# Function: upload_using_instance_name
# Purpose : Upload a file to instance using his name.
# Usage   : upload_using_instance_name <Cloud instance name>
#                            <Local file which needs to be uploaded>
#                            <path to destination directory>
# ***********************************************************************************
function upload_using_instance_name() {
  if [[ $# -ne 3 ]]; then
    show_upload_help
    exit
  fi
  local INSTANCE_NAME="${emailid}-$1"
  local FILE=$2
  local DESTINATION=$3
  local INSTANCE_IP=$(get_instance_ip $INSTANCE_NAME)
  upload "$INSTANCE_IP" "$FILE" "$DESTINATION"
}

# ***********************************************************************************
# Function: download_using_instance_name
# Purpose : Download a file from cloud instance using his name.
# Usage   : download_from_instance_name <Cloud instance name>
#                            <Location of file which needs to be downloaded>
#                            <Local machine's path where you need to download>
# ***********************************************************************************
function download_using_instance_name() {
  if [[ $# -ne 3 ]]; then
    show_download_help
    exit
  fi
  local INSTANCE_NAME="${emailid}-$1"
  local FILE=$2
  local DESTINATION=$3
  local INSTANCE_IP=$(get_instance_ip $INSTANCE_NAME)
  download "$INSTANCE_IP" "$FILE" "$DESTINATION"
}

# *****************************************************************************
# Function: list_instances
# Purpose : Lists the cloud instances currently running for the user.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_instances() {
  echo "Listing instances for the user:$emailid"
  local instance_list=$(gcloud compute instances list --format=text --sort-by=creationTimestamp  --regexp "${emailid}-.*" | sed -e "s/${emailid}-//g")
  local instance_names=($(echo "$instance_list" | grep '^name'))
  local instance_status=($(echo "$instance_list" | grep status))
  local instance_creationtime=($(echo "$instance_list" | grep creationTimestamp))
  local instance_internalip=($(echo "$instance_list" | grep "networkIP"))
  printf "%-35s %-30s %-20s %-20s\n" "Name" "Creation Time" "Internal IP" "Status"
  for (( i = 1 ; i < ${#instance_names[@]} ; i=i+2 )) do
    printf "%-35s %-30s %-20s %-20s\n" ${instance_names[$i]} ${instance_creationtime[$i]} ${instance_internalip[$i]} ${instance_status[$i]}
  done
  echo "------------------------------------------------"
}

# *****************************************************************************
# Function: list_snapshots
# Purpose : Lists the cloud instances currently running for the user.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_snapshots() {
  echo "Listing snapshots for the user:$emailid"
  local snapshot_list=$(gcloud compute snapshots list --format=text --sort-by=creationTimestamp --regexp "${emailid}-.*" | sed -e "s/${emailid}-//g")
  local snapshot_names=($(echo "$snapshot_list" | grep name))
  local snapshot_status=($(echo "$snapshot_list" | grep status))
  local snapshot_size=($(echo "$snapshot_list" | grep diskSizeGb))
  local snapshot_creationtime=($(echo "$snapshot_list" | grep creationTimestamp))
  printf "%-25s %-10s %-30s %-20s\n" "Name" "Size(GB)" "CreationTime" "Status"
  for (( i = 1 ; i < ${#snapshot_names[@]} ; i=i+2 )) do
    printf "%-25s %-10s %-30s %-20s\n" ${snapshot_names[$i]} ${snapshot_size[$i]} ${snapshot_creationtime[$i]} ${snapshot_status[$i]}
  done
  echo "------------------------------------------------"
}
# *****************************************************************************
# Function: list_buildids
# Purpose : Lists buildids running for the user by getting the snapshot list.
# Usage   : list_buildids
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_buildids() {
  echo "Listing build-ids for the user:$emailid"
  local snapshot_list=$(gcloud compute snapshots list --format=text --sort-by=creationTimestamp --regexp "${emailid}-.*-ssd2" | sed -e "s/${emailid}-//" | sed -e "s/-ssd2//g" )
  local snapshot_names=($(echo "$snapshot_list" | grep name))
  local snapshot_status=($(echo "$snapshot_list" | grep status))
  local snapshot_creationtime=($(echo "$snapshot_list" | grep creationTimestamp))
  printf "%-20s %-30s %-30s %-10s\n" "Refspec/Branch" "Build-id" "CreationTime" "Status"
  for (( i = 1 ; i < ${#snapshot_names[@]} ; i=i+2 )) do
    local refspec=$(echo "${snapshot_names[$i]}" | sed -e "s/.*bld-//g" )
    printf "%-20s %-30s %-30s %-10s\n" "$refspec" "${snapshot_names[$i]}" "${snapshot_creationtime[$i]}" "${snapshot_status[$i]}"
  done
  echo "------------------------------------------------"
}
# *****************************************************************************
# Function: list_runids
# Purpose : Lists the runids for the user by getting the instance list.
# Usage   : list_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_runids() {
  echo "Listing run-ids for the user:$emailid"
  local instance_list=$(gcloud compute instances list --format=text --sort-by=creationTimestamp  --regexp "${emailid}-.*run-.*" | sed -e "s/${emailid}-//g")
  local instance_names=($(echo "$instance_list" | grep '^name'))
  local instance_status=($(echo "$instance_list" | grep status))
  printf "%-15s %-40s %-10s\n" "Run-id" "Build-id-[Run-TAG]" "Status"
  for (( i = 1 ; i < ${#instance_names[@]} ; i=i+2 )) do
    local runid=$(echo ${instance_names[$i]} | grep -o '[^-]*$')
    local buildid=$(echo ${instance_names[$i]} | sed -e "s/run-/bld-/")
    buildid=${buildid%-$runid}
    printf "%-15s %-40s %-10s\n" ${runid} ${buildid} "${instance_status[$i]}"
  done
  echo "------------------------------------------------"
}
# *****************************************************************************
# Function: list_disks
# Purpose : Lists the disks without instances for the user.
# Usage   : list_disks
# Prereq: Aurora init has been called.
# *****************************************************************************
function list_disks() {
  echo "Listing disks for the user:$emailid"
  # Instances
  local instance_list=$(gcloud compute instances list --format=text --sort-by=creationTimestamp --regexp ".*" | grep ${emailid} | sed -e "s/${emailid}-//g")
  local instance_names=($(echo "$instance_list" | grep '^name'))
  local instances_str=${instance_names[1]}
  for (( i = 3; i < ${#instance_names[@]} ; i=i+2 )) do
    instances_str="$instances_str\|${instance_names[$i]}"
  done

  # Disks without instances
  local REGEX=".*$1.*"

  if [[ -n $instances_str ]]; then
    local disk_list=$(gcloud compute disks list --format=text --sort-by=creationTimestamp --regexp "${REGEX}" | grep ${emailid} | sed -e "s/${emailid}-//g" | grep -v "$instances_str")
  else
    local disk_list=$(gcloud compute disks list --format=text --sort-by=creationTimestamp --regexp "${REGEX}" | grep ${emailid} | sed -e "s/${emailid}-//g")
  fi

  local disk_names=($(echo "$disk_list" | grep name))
  printf "%-35s %-20s\n" "Name"
  for (( i = 1 ; i < ${#disk_names[@]} ; i=i+2 )) do
    printf "%-35s\n" ${disk_names[$i]}
  done
  echo "------------------------------------------------"
}
# *****************************************************************************
# Function: delete_instances
# Purpose : Deletes the cloud instances currently running for the user.
# Usage   : delete_user_instances
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_instances() {
  local REGEX=".*$1.*"
  local user_instances=$(gcloud compute instances list --regexp "${REGEX}" | grep ${emailid} | cut -d ' ' -f 1)

  # TODO: Print message if no instance matches with given criteria and exit
  echo "The following instances will be permanently deleted: "
  for instance in $user_instances; do
    echo "$instance"
  done

  if [ "$2" != "-f" -a "$2" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  user_instances=$(echo "${user_instances}" | tr '\n' ' ')
  gcloud compute instances delete $user_instances -q --delete-disks all
}

# *****************************************************************************
# Function: delete_snapshots
# Purpose : Deletes the cloud snapshots currently running for the user.
# Usage   : delete_user_snapshots
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_snapshots() {
  local REGEX=".*$1.*"
  local user_snapshots=$(gcloud compute snapshots list --regexp "${REGEX}" | grep ${emailid} | cut -d ' ' -f 1)

  echo "The following snapshots will be permanently deleted: "
  for snapshot in $user_snapshots; do
    echo "$snapshot"
  done

  if [ "$2" != "-f" -a "$2" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  user_snapshots=$(echo "${user_snapshots}" | tr '\n' ' ')
  gcloud compute snapshots delete $user_snapshots -q
}
# *****************************************************************************
# Function: delete_disks
# Purpose : Deletes the disks currently running for the user.
# Usage   : delete_disks
# Prereq: Aurora init has been called.
# *****************************************************************************
function delete_disks() {
  local REGEX=".*$1.*"
  local user_disks=$(gcloud compute disks list --regexp "${REGEX}" | grep ${emailid} | cut -d ' ' -f 1)

  echo "The following disks will be permanently deleted: "
  for disk in $user_disks; do
    echo "$disk"
  done

  if [ "$2" != "-f" -a "$2" != "--force" ]; then
    read -r -p "Are you sure you want to continue? (y/N)" response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
      echo "Proceeding with delete..."
    else
      exit
    fi
  fi
  user_disks=$(echo "${user_disks}" | tr '\n' ' ')
  gcloud compute disks delete $user_disks -q
}
# *****************************************************************************
# Function: set_max_instances
# Purpose : Changes the number of max instances allowed..
# Usage   : set_max_instances <max instances>
# Prereq:   aurora init has been called.
# *****************************************************************************
function set_max_instances() {
  local MAX_INSTANCES=$1
  if [[ "$MAX_INSTANCES" =~ ^[^0-9]+$ ]]; then
    echo "Number of instances should be a number"
    exit 1
  fi
  echo "Changing the maximum number of instances for user:${emailid} to $MAX_INSTANCES"
  sed -i "s/MAX_USER_INSTANCES=.*/MAX_USER_INSTANCES=$MAX_INSTANCES/" /home/$USER/.aurora.conf
}
# *****************************************************************************
# Function: login_instance
# Purpose : Logs into the insatance name provided.
# Usage   : login_instance <build-id>
# Prereq: The instance should exsist.
# *****************************************************************************
function login_instance() {
  if [[ $1 == "help" || -z $1 ]]; then
    show_login_help
    exit 1
  fi
  local INSTANCE_NAME="${emailid}-$1"
  gcloud compute instances list ${INSTANCE_NAME} | grep "${INSTANCE_NAME}" || RESULT=$? &> /dev/null
  local INSTANCE_IP=$(get_instance_ip ${INSTANCE_NAME})
  if [[ $RESULT -ne 0 ]];then
    echo "INSTANCE ${INSTANCE_NAME} does not exist"
    show_login_help
    exit 1
  fi
  run_cmd_gci_sshforwarding ${INSTANCE_IP} "/bin/bash"
}
# *****************************************************************************
# Function: list_entities
# Purpose : Parses the options for aurora ls and calls the respective functions
# Usage   : list_entities <entity type>
# Prereq:   aurora init has been called.
# *****************************************************************************
function list_entities()
{
  if [[ $1 == "help" ]]; then
    show_ls_help
    exit 1
  fi

  if [[ -z "${gerritid}" || -z "${emailid}" ]]; then
    echo "gerritid or email not set, please run aurora init"
    exit 1
  fi

  case $1 in
    instances|"")
      list_instances ;;
    snapshots)
      list_snapshots ;;
    run)
      list_runids ;;
    build)
      list_buildids ;;
    disks)
      list_disks ;;
    *)
      echo "Invalid entity for aurora ls"
      show_ls_help ;;
  esac
}

# *****************************************************************************
# Function: delete_entities
# Purpose : Parses the options for aurora rm and calls the respective functions
# Usage   : delete_entities <entity type> <regex>
# Prereq:   aurora init has been called.
# *****************************************************************************
function delete_entities()
{
  if [[ $1 == "help" || $# -lt 2 ]]; then
    show_rm_help
    exit 1
  fi

  if [[ -z "${gerritid}" || -z "${emailid}"  ]]; then
    echo "gerritid or email not set, please run aurora init"
    exit 1
  fi

  case $1 in
    instances| run)
      delete_instances $2 $3 ;;
    snapshots| build)
      delete_snapshots $2 $3 ;;
    disks)
      delete_disks $2 $3;;
    *)
      echo "Invalid entity for aurora rm"
      show_rm_help;;
  esac
}
# *****************************************************************************
# Function: run_debug_test
# Purpose : Parses the options for debug-test for local and non-local changes
# Usage   : run_debug_test <arguments>
# Prereq:   aurora init has been called.
# *****************************************************************************
function run_debug_test() {
  local TEMP=`getopt -o W:l:i:n:s:KLa:c:h --long WORKSPACE:,keep-running,buildid:,test_iterations:,num_instances:,script:,local-changes,commit:,alps-path,\help -n 'aurora.sh' -- "$@"`
eval set -- "$TEMP"

TEST_ITERATIONS=1
NUM_INSTANCES=1
LOCAL_CHANGES_ENABLED=0
ALPS_PATH=/home/${USER}/work/alps
# extract options and their arguments into variables.
while true ; do
  case "$1" in
    -W| --WORKSPACE) export WORKSPACE=$2 ; shift 2 ;;
    -l|--buildid) BUILD_ID=$2 ; shift 2 ;;
    -i|--test_iterations) TEST_ITERATIONS=$2 ; shift 2 ;;
    -s|--script) USER_SCRIPT=$2 ; shift 2 ;;
    -n|--num_instances) NUM_INSTANCES=$2 ; shift 2 ;;
    -K|--keep-running) KEEP_RUNNING="-K" ; shift ;;
#Optional argments for local changes transfer
    -L|--local-changes) LOCAL_CHANGES_ENABLED="1"; shift ;;
    -c|--commit) COMMIT_HASH=$2 ; shift 2 ;;
    -a|--alps-path) ALPS_PATH=$2 ; shift 2 ;;
    -h|--help)
      show_debug_test_help
      exit 0
      shift ;;
    --) shift ; break ;;
    *)
      echo "Unrecognized option $1"
       exit 1 ;;
  esac
done

if [[ -z "$BUILD_ID" || -z "$USER_SCRIPT"  ]]; then
  echo "Missing required arguments"
  show_debug_test_help
  exit 1
fi
check_file_existence "$USER_SCRIPT"

if [[ "$LOCAL_CHANGES_ENABLED" == "1" ]]; then
  #Check if ALPS_PATH is correct
  local retval=0
  git rev-parse --resolve-git-dir $ALPS_PATH/.git || retval=$?
  if [[ $retval != "0" ]]; then
    echo "Alps not found at :$ALPS_PATH"
    echo "Use the -a(--alps-path) to specify the path to alps"
    exit 1
  fi
  #Check if commit is correct
  local commit_check=$(git --git-dir $ALPS_PATH/.git --work-tree $ALPS_PATH cat-file -t $COMMIT_HASH)
  if [[ $commit_check != "commit" ]]; then
    echo "Not a valid commit. Please enter a valid commit."
    exit 1
  fi

  if [[ -z "$COMMIT_HASH" ]]; then
    echo "Missing required argument for transferring local changes"
    show_debug_test_help
    exit 1
  else
    #Run with local changes
    run_pipelines.sh -P "DEBUG-TEST" --base_script_dir "@CMAKE_CURRENT_BINARY_DIR@/pipeline_scripts/alps/" -i $TEST_ITERATIONS -s $USER_SCRIPT\
 -n $NUM_INSTANCES -l $BUILD_ID -L -a $ALPS_PATH -c $COMMIT_HASH $KEEP_RUNNING
  fi
else
  #Run without local changes
  run_pipelines.sh -P "DEBUG-TEST" --base_script_dir "@CMAKE_CURRENT_BINARY_DIR@/pipeline_scripts/alps/" -i $TEST_ITERATIONS -s $USER_SCRIPT\
 -n $NUM_INSTANCES -l $BUILD_ID $KEEP_RUNNING
fi

}
