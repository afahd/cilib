#!/bin/bash -e

export PATH=@CMAKE_BINARY_DIR@/:/opt/pg/scripts:$PATH
echo "aurora_build.sh started with [aurora_build.sh  $@]"
. gc_helpers.sh
. aurora_utils.sh
source aurora_infra_settings.conf
source /home/$USER/.aurora.conf

# TODO: SN_ID variable should hold the "v3-d1" part as well.
# This way we will not need to change v3 manually.
SN_ID=$(get_latest_snapshot_id)
SNAP1=${PRIM_INST_NAME}-d1-${SN_ID}
SNAP2=${PRIM_INST_NAME}-d2-${SN_ID}
DOCK_NAME=pg-docker-repo:5000/pg_dev:${SN_ID}

# TODO: Make a decision about machine type and Disk sizes.

BRANCH=""
REFSPEC=""
PROJECT=""

declare -A MINOR_STEPS_ST
declare -A MINOR_STEPS_ED
MAJOR_STEPS="build"
MINOR_STEPS_ST[init]=1
MINOR_STEPS_ST[build]=1
MINOR_STEPS_ED[init]=1
MINOR_STEPS_ED[build]=17


function usage() {
cat <<EOF
usage: $0
 -c | --cleanup : Test Cleanup
 -Q | --major : Jump to specific major step in the install process
 -R | --minor_st : Jump to specific minor step in the install process
 -E | --minor_end : Stop at this step when in debug
 -G | --gerrit_refpec: Mention the gerrit refspec
 -B | --branch: branch to run the setup on. Options: master, stable_4_0
 -P | --project: project on which the code change is expected. Options: alps, pg_ui, etc
 -O | --stop : DONT Continue beyond the specifict step to end of the installation
 -h | --help : help
EOF
exit 0
}

# Parsing arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
     -c| --cleanup ) CLEANUP=1;  ;;
     -Q| --major ) MAJOR_STEPS="$2"; TMP_MAJOR="$2"; shift ;;
     -R| --minor_st ) MINOR_STEPS_ST[$TMP_MAJOR]="$2"; shift ;;
     -E| --minor_end ) MINOR_STEPS_ED[$TMP_MAJOR]="$2"; shift ;;
     -G| --gerrit_refspec ) REFSPEC=$2; shift ;;
     -B| --branch ) BRANCH=$2; shift ;;
     -P| --project ) PROJECT=$2; shift ;;
     -I| --instance_name ) INSTANCE_NAME=$2; shift ;;
     -O| --stop ) STOP=1; ;;
     -h | --help ) usage; ;;
    -- ) shift; break ;;
    * )
      echo "Unknown parameter: $1";
      usage; break;;
  esac
  shift
done

# Describe the possible mappings for branch->component translations
declare -A branch_to_component
branch_to_component['master']='unstable'
branch_to_component['stable_4_0']='everest'
# Convert the branch name to respective component name
for key in ${!branch_to_component[@]}; do
  if [[ "${key}" == ${BRANCH} ]]; then
    APT_COMPONENT=${branch_to_component[$key]}
    break
  fi
done
step_file=$WORKSPACE/logs/${INSTANCE_NAME}-last-successful-step
#Get the IP address of the instances, needed incase continue is specified.
INSTANCE_IP=$(get_instance_ip ${INSTANCE_NAME})

function init_id() {
  conf_file="/opt/pg/scripts/aurora.conf"
  echo "Please enter your gerrit id: "
  read gerritid
  echo "gerritid=${gerritid}" > ${conf_file}
}

function build_image() {
  local step=$1
  case "$step" in

  1)
    echo "Creating the disk[${INSTANCE_NAME}-d1] and [${INSTANCE_NAME}-d2] for the instance in the cloud"
    exec_gcloud_cmd disks create "${INSTANCE_NAME}-d1" \
      --source-snapshot "${SNAP1}" --type "$DISK_TYPE" --size="$DISK1_SIZE" -q
    exec_gcloud_cmd disks create "${INSTANCE_NAME}-d2" \
      --source-snapshot "${SNAP2}" --type "$DISK_TYPE" --size="$DISK2_SIZE" -q
    record_step $step $step_file
    ;;

  2)
    echo ${USER}:$(cat /home/${USER}/.ssh/id_rsa.pub) > /tmp/keys
    echo plumgrid:$(echo ${COMMON_KEY}) >> /tmp/keys
    echo "Creating the instance[$INSTANCE_NAME] in the cloud"
    exec_gcloud_cmd instances create "${INSTANCE_NAME}" \
      --machine-type "$MACHINE_TYPE" --network "$NETWORK" --maintenance-policy \
      "MIGRATE" --scopes "$SCOPES" -q \
      --disk "name=${INSTANCE_NAME}-d1" "mode=rw" "boot=yes" "auto-delete=yes" \
      --disk "name=${INSTANCE_NAME}-d2" "mode=rw" "boot=no" "auto-delete=yes" --no-address --tags "no-ip" \
      --metadata-from-file sshKeys=/tmp/keys --metadata email="$emailid"
    record_step $step $step_file
    ;;

  3)
    INSTANCE_IP=$(get_instance_ip ${INSTANCE_NAME})
    echo "Waiting for the machine to boot up and allow ssh access"
    wait_for_instance ${INSTANCE_IP}
    record_step $step $step_file
    ;;

  4)
    echo "setting up forward on ${INSTANCE_NAME} Machine "
    tryexec run_cmd_gci ${INSTANCE_IP} "echo 'host *' > ~/.ssh/config; echo '    ForwardAgent yes'>>~/.ssh/config"
    record_step $step $step_file
    ;;

  5)
    echo "starting the pgdev container"
    tryexec run_dock_container ${INSTANCE_IP} ${DOCK_NAME} "./local_docker_id" "./local_docker_ip"
    tryexec verify_docker_running ${INSTANCE_IP} ${DOCK_NAME}
    record_step $step $step_file
    ;;

  6)
    echo "Copy build-instance key to pgdev container"
    tryexec run_cmd_gci ${INSTANCE_IP} "echo -e  'y\n'|ssh-keygen -t rsa -N \"\" -f ~/.ssh/id_rsa"
    tryexec run_cmd_gci ${INSTANCE_IP} "sudo su -c \"cat /home/${USER}/.ssh/id_rsa.pub >> \
      /var/lib/docker/btrfs/subvolumes/\`cat local_docker_id\`/home/plumgrid/.ssh/authorized_keys\""
    record_step $step $step_file
    ;;

  7)
    echo "Copy local key to pgdev container"
    tryexec scp -o StrictHostKeyChecking=no ~/.ssh/id_rsa.pub ${USER}@${INSTANCE_IP}:./auth-key.pub
    tryexec run_cmd_gci ${INSTANCE_IP} "sudo su -c \"cat /home/${USER}/auth-key.pub >> \
      /var/lib/docker/btrfs/subvolumes/\`cat local_docker_id\`/home/plumgrid/.ssh/authorized_keys\""
    record_step $step $step_file
    ;;

  8)
    check_ssh_server_status ${INSTANCE_IP} || retval=$?
    if [[ $retval == 1 ]]; then
      run_cmd_gci ${INSTANCE_IP} "sudo docker ps"
      echo "Dokcer stopped.. Please run aurora build with --continue to retry!!"
      record_step 4 $step_file
      exit $retval
    fi
    record_step $step $step_file
    ;;

  9)
    GIT_SYNC_SCRIPT=$(mktemp /tmp/gitsync.sh-XXXXX)
    echo "Generate script for syncing the gerrit repo"
    tryexec write_gitsync.sh "${GIT_SYNC_SCRIPT}" "${BRANCH}" "${PROJECT}" "${REFSPEC}"
    tryexec upload_to_docker ${INSTANCE_IP} ${GIT_SYNC_SCRIPT} /tmp/
    tryexec run_cmd_docker ${INSTANCE_IP} "mv ${GIT_SYNC_SCRIPT} /tmp/gitsync.sh"
    rm ${GIT_SYNC_SCRIPT}
    record_step $step $step_file
    ;;

  10)
    echo "Execute the gitsynch script on docker container"
    pkill "ssh-agent" || true
    tryexec check_ssh_server_status ${INSTANCE_IP}
    tryexec run_cmd_docker_sshforwarding ${INSTANCE_IP} "bash /tmp/gitsync.sh"
    record_step $step $step_file
    ;;

  11)
    echo "Starting build-all.sh for ${APT_COMPONENT}==="
    tryexec run_build_all ${INSTANCE_IP} ${APT_COMPONENT} "/tmp/build_all.log"
    record_step $step $step_file
    ;;

  12)
    # Adding polling as a separate step, so that if the connection broke at the previous step,
    # this step can be run directly to see if the previous command is still running
    echo "Polling for build-all (tailing \"/tmp/build_all.log\" for complete logs)"
    tryexec run_poll_cmd ${INSTANCE_IP} "run_build_all.sh" "/tmp/build_all.log" "1"
    download_from_docker ${INSTANCE_IP} "/tmp/build_all.log" "${WORKSPACE}/logs/"
    record_step $step $step_file
    ;;
  13)
    local local_file=$(mktemp /tmp/post_build_all.sh-XXXXX)
    cat /dev/null > ${local_file}
    echo "find /home/plumgrid -name \"*.o\" -not -name 'setcontext.o' | xargs rm -f" >> ${local_file}
    echo "find /home/plumgrid -name \"*.a\" | xargs rm -f" >> ${local_file}
    echo "find /home/plumgrid -name \"*_pre\" | xargs rm -f" >> ${local_file}
    echo "#sudo su plumgrid -c /bin/bash" >> ${local_file}

    tryexec upload_to_docker ${INSTANCE_IP}  ${local_file} ${local_file}
    rm ${local_file}
    tryexec run_cmd_docker ${INSTANCE_IP} "/bin/bash ${local_file}"
    record_step $step $step_file
    ;;

  14)
    echo "Making a snapshot for the container"
    tryexec run_cmd_gci ${INSTANCE_IP} "echo \"pg_dev_${INSTANCE_NAME}\" > docker_build_id" "t"
    tryexec run_cmd_gci ${INSTANCE_IP} "sudo docker commit \`cat ./local_docker_id\` pg_dev_${INSTANCE_NAME}:latest"
    record_step $step $step_file
    ;;

  15)
    echo "Making sure docker(pg_dev_${INSTANCE_NAME}:latest) is commited successfully"
    tryexec verify_docker_commited ${INSTANCE_IP} "pg_dev_${INSTANCE_NAME}"
    record_step $step $step_file
    ;;

  16)
    BUILD_ID=`echo ${INSTANCE_NAME} | sed "s/${gerritid_lower}-//"`
    echo "Creating a snapshot of VM for BUILD-ID=${BUILD_ID}"
    tryexec run_cmd_gci ${INSTANCE_IP} "echo ${INSTANCE_NAME}-ssd1 > ~/build_d1_snapshot"
    tryexec run_cmd_gci ${INSTANCE_IP} "echo ${INSTANCE_NAME}-ssd2 > ~/build_d2_snapshot"
    tryexec run_cmd_gci ${INSTANCE_IP} "echo ${SN_ID} > ~/primary_snapshot"

    #SSD-2 needs to be created 1st because using fsfreeze on / causes ssh timeout
    #Flushing the disk buffers
    run_cmd_gci ${INSTANCE_IP} "sudo sync"
    run_cmd_gci ${INSTANCE_IP} "sudo fsfreeze -f /opt"
    exec_gcloud_cmd disks snapshot ${INSTANCE_NAME}-d2 --snapshot-names ${INSTANCE_NAME}-ssd2

    #Flushing the disk buffers
    run_cmd_gci ${INSTANCE_IP} "sudo sync"
    run_cmd_gci ${INSTANCE_IP} "sudo fsfreeze -f /"
    exec_gcloud_cmd disks snapshot ${INSTANCE_NAME}-d1 --snapshot-names ${INSTANCE_NAME}-ssd1

    echo "BUILD-ID=${BUILD_ID}" | tee $WORKSPACE/logs/build_id
    record_step $step $step_file
    ;;

  17)
    echo "Shutting down the Instance ${INSTANCE_NAME}"
    exec_gcloud_cmd instances delete ${INSTANCE_NAME} --delete-disks all  -q
    rm $step_file
    printf "\n\n *********************** BUILD-ID = ${BUILD_ID} *********************** \n\n"
    ;;

  *)
    echo "NOP - $step"
  ;;
  esac
}

for MAJOR_STEP in $MAJOR_STEPS; do
  echo ""
  echo " ====== Starting STEP [$MAJOR_STEP] Number of Steps ::${MINOR_STEPS_ST[$MAJOR_STEP]} -> ${MINOR_STEPS_ED[$MAJOR_STEP]}  ======"
  echo ""
  for MINOR_STEP in `seq ${MINOR_STEPS_ST[$MAJOR_STEP]} ${MINOR_STEPS_ED[$MAJOR_STEP]}`; do
    echo ""
    echo "    === Starting STEP [$MAJOR_STEP][$MINOR_STEP] ==="
    echo ""
    case "$MAJOR_STEP" in
      init)
        echo "Going to call init function"
        init_id
      ;;
      build)
        start_time=$(date +%s)
        build_image $MINOR_STEP
        end_time=$(date +%s)
        print_time_taken $start_time $end_time "[$MAJOR_STEP][$MINOR_STEP]"
      ;;
      *)
        echo "UNKNOWN STEP $MAJOR_STEP.$MINOR_STEP"
      ;;
    esac
    if [ -n "$STOP" ] ; then
      exit
    fi
  done
done

