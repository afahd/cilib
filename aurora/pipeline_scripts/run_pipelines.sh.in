#!/bin/bash -e
## The purpose of this script is to run specific pipelines e.g. smoke, extended etc on gcloud instances. The command on the terminal
## "aurora pipeline" maps to this script which then divides the script to run either alps_run_pipelines.sh or coral_run_pipelines
## depending upon the parameter passed. Each pipeline is essentially a group of tests, this script runs a specific group of tests
## based on the parameter passed to it, on the gcloud instances. This script is also used by multiple review and periodic pipelines
## on the builder side.

export PATH=@CMAKE_BINARY_DIR@/:/opt/pg/scripts:/opt/pg/scripts/gcloud/aurora/pipeline_scripts/alps:\
/opt/pg/scripts/gcloud/aurora/pipeline_scripts/coral:/opt/pg/scripts/gcloud/aurora/pipeline_scripts/corelib:\
/opt/pg/scripts/gcloud/aurora/pipeline_scripts/nirvana:/opt/pg/scripts/gcloud/aurora/pipeline_scripts/middle-earth:$PATH

source /home/$USER/.aurora.conf
source pl_utils.sh
source pl_help.sh
source pl_settings.conf
source gc_helpers.sh

PIPELINE_ARGUMENTS="$@"
# read the options
TEMP=`getopt -o Q:R:E:W:l:P:b:i:f:t:T:p:u:s:n:\r:d:IFKc:e:a:h --long major:,project:,preemptible,minor_start:,minor_end:,WORKSPACE:,buildid:,pipeline:,branch:,test_iterations:,first_test:,step_size:,update_db_failure_limit:,script:,num_instances:,base_script_dir:,dest_script_dir:,initial_run,db_update,keep-running,local_commit:,topology:,existing_commit_hash:,alps-path:,\help -n 'run_pipelines.sh' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
    -P|--pipeline) PIPELINE=$2 ; shift 2 ;;
    -p|--project) PROJECT=$2 ; shift 2 ;;
    -b|--branch) BRANCH=$2 ; shift 2 ;;
    -h|--help)
      show_run_tests_help
      exit 0
      shift ;;
    --) shift ; break ;;
    *)
      shift ;;
  esac
done

# Build cost code. This code will be embedded in instance name.
# From there, we can generate cost report by using this code.
# First: Get Branch name.
# TODO: Need to get branch name from build id. Append this branch name in cost_code.
cost_pipeline_code=${PL_CODE["$PIPELINE"]}
if [[ -z "$cost_pipeline_code" ]]; then
  cost_pipeline_code="x"
fi
echo "cost_pipeline_code=${cost_pipeline_code}"
if [[ $PIPELINE == "coral-smoke" ]]; then
  BASE_SCRIPT_DIR="@CMAKE_CURRENT_BINARY_DIR@/coral/"
  coral_run_pipelines.sh --base_script_dir "$BASE_SCRIPT_DIR" --cost_pipeline_code "$cost_pipeline_code" $PIPELINE_ARGUMENTS
elif [[ $PIPELINE =~ "corelib-"+ ]]; then
  BASE_SCRIPT_DIR="@CMAKE_CURRENT_BINARY_DIR@/corelib/"
  corelib_run_pipelines.sh --base_script_dir "$BASE_SCRIPT_DIR" --cost_pipeline_code "$cost_pipeline_code" $PIPELINE_ARGUMENTS
elif [[ $PIPELINE == "nirvana" || $PROJECT == "nirvana" ]]; then
  BASE_SCRIPT_DIR="@CMAKE_CURRENT_BINARY_DIR@/nirvana/"
  nirvana_run_pipelines.sh --base_script_dir "$BASE_SCRIPT_DIR" --cost_pipeline_code "$cost_pipeline_code" $PIPELINE_ARGUMENTS
elif [[ $PIPELINE == "networking-plumgrid" ]]; then
  aurora_networking_plumgrid.sh $PIPELINE_ARGUMENTS
elif [[ $PIPELINE == "pgui-smoke" && $BRANCH == "grunt" ]]; then
  BASE_SCRIPT_DIR="@CMAKE_CURRENT_BINARY_DIR@/alps/"
  BASE_SCRIPT="pgui_base_test.sh"
  alps_run_pipelines.sh --base_script_dir "$BASE_SCRIPT_DIR" --cost_pipeline_code "$cost_pipeline_code" $PIPELINE_ARGUMENTS
else
  BASE_SCRIPT_DIR="@CMAKE_CURRENT_BINARY_DIR@/alps/"
  alps_run_pipelines.sh --base_script_dir "$BASE_SCRIPT_DIR" --cost_pipeline_code "$cost_pipeline_code" $PIPELINE_ARGUMENTS
fi
