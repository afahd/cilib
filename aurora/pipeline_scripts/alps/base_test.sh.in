#!/bin/bash
# Script to run tests in alps director
# and collect log from the failing tests
# these are designed to work with aurora

CTEST_ST=1
CTEST_ED=25
USER_TEST=""
instance_no="1"
itr=2
PIPELINE="smoke"
CTEST_OPT=' '
TESTID="ctest-$CTEST_ST-$CTEST_ED"
export EXPORT_FAILURES_DIR="/tmp/aurora_logs/$TESTID"
export EXPORT_FAILURES_DIR_TMP="/tmp/log/$TESTID"
rm -rf "${EXPORT_FAILURES_DIR}"
rm -rf "${EXPORT_FAILURES_DIR_TMP}"
mkdir -p "$EXPORT_FAILURES_DIR"
mkdir -p "$EXPORT_FAILURES_DIR_TMP"
cd ~/work/alps/build
export AURORA=1
#Exporting pipeline variables
if [[ $PIPELINE == "smoke" ]]; then
  export BUILD_GUI=1
  export EXCLUDE_UI_NON_PITA=1
  export EXCLUDE_UNSTABLE=1
elif [[ $PIPELINE == "extended" ]]; then
  export BUILD_NIGHTLY=1
  export EXCLUDE_NON_NIGHTLY=1
  export EXCLUDE_UNSTABLE=1
  export EXCLUDE_UI_NON_PITA=1
  export BUILD_GUI=1
elif [[ $PIPELINE == "unstable" || $PIPELINE == "DEBUG-TEST" ]]; then
  export BUILD_NIGHTLY=1
  unset EXCLUDE_UNSTABLE
  unset EXCLUDE_NON_NIGHTLY
fi

# Run cmake ..
cmake ..
# Disable ipv6
echo 1 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6

# If this is the last instance, determine the index of the last test that needs to be run
if [[ "x$CTEST_ED" == "x" ]] ; then
  if [[ $PIPELINE == "unstable" ]]; then
    CTEST_ED=`ctest -N -L ^type:local$ | grep "UNSTABLE" | tail -1 | cut -d ' ' -f 4  | tr -d ':' | tr -d '#'`
  else
    CTEST_ED=`ctest -N -L ^type:local$ | grep "Test " | tail -1 | cut -d ' ' -f 4  | tr -d ':' | tr -d '#'`
  fi
fi

tests_ran=0
#Delete the exsisting logs
rm -rf /opt/pg/log/*

# use a common, but hopefully unique prefix for the log destination
formatted_date=$(date '+%Y%m%d-%H%M%S')
for run in $(seq 1 $itr); do
  echo  "Running iteration number: ${run}"
  # need to recreate the directory every time, because we move it away at the end of the loop
  for testno in $(seq $CTEST_ST $CTEST_ED); do
    sudo pkill rsyslogd
    sleep 0.2
    pgrep rsyslogd >> /dev/null  || $(sudo rsyslogd &)
    # Dtermine the test name from the test index
    if [[ $PIPELINE == "unstable" ]]; then
      test_name=$(ctest -N  -L ^type:local$ | grep "UNSTABLE" | grep "Test.*#$testno:" | cut -d ':' -f 2 | tr -d ' ')
    else
      test_name=$(ctest -N  -L ^type:local$ | grep "Test.*#$testno:" | cut -d ':' -f 2 | tr -d ' ')
    fi
    echo "Running $test_name"
    #Don't append iteration/instance number in case of pipeline
    if [[ $instance_no == 1 && $itr == 1 ]]; then
      log_file_name="${test_name}"
    else
      log_file_name="ctestout_inst${instance_no}_iter${run}_${test_name}"
    fi
    #Increment the number of tests ran
    if [[ -n "$test_name" ]]; then
      ((tests_ran++))
    fi

    ctest --output-on-failure  -L ^type:local$ -R "^${test_name}$" >& "$EXPORT_FAILURES_DIR/${log_file_name}.log"
    result="$?"
    if [[ "x$result" != "x0" ]] ; then
      echo "                 FAILED"
      mv "$EXPORT_FAILURES_DIR/${log_file_name}.log" "$EXPORT_FAILURES_DIR_TMP/${log_file_name}.FAILED.log"
      mod_test_name=$(echo "$test_name" | sed "s/UNSTABLE_//")
      failing_test_name=$(find "$EXPORT_FAILURES_DIR" -name "*.tar.gz")
      mv ${failing_test_name} ${EXPORT_FAILURES_DIR_TMP}/$log_file_name.tar.gz
    fi
    rm -rf $EXPORT_FAILURES_DIR/*
  done
done
echo "$tests_ran" > $EXPORT_FAILURES_DIR_TMP/total_tests
#Copy logs to /opt/pg/log for get_latest_logs to copy the tests.
mkdir -p /opt/pg/log/$TESTID
cp -r ${EXPORT_FAILURES_DIR_TMP} /opt/pg/log/
echo " All Logs are in :: ${EXPORT_FAILURES_DIR}"
echo 'All done'

