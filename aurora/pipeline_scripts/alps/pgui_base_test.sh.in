#!/bin/bash
# Script to run tests in alps director
# and collect log from the failing tests
# these are designed to work with aurora

instance_no="1"
PIPELINE="smoke"
export EXPORT_FAILURES_DIR="/tmp/aurora_logs/${instance_no}"
export EXPORT_FAILURES_DIR_TMP="/tmp/log/${instance_no}"
export PATH="${PATH}:/opt/pg/scripts/:/home/plumgrid/work/pg_ui/devtools/node_modules/grunt-cli/bin"
rm -rf "${EXPORT_FAILURES_DIR}"
rm -rf "${EXPORT_FAILURES_DIR_TMP}"
mkdir -p "${EXPORT_FAILURES_DIR}"
mkdir -p "${EXPORT_FAILURES_DIR_TMP}"
mkdir -p "${EXPORT_FAILURES_DIR_TMP}/xml_logs"
#Delete the exsisting logs
rm -rf /opt/pg/log/*
cd ~/work/pg_ui/devtools

#Exporting pipeline variables
if [[ "${PIPELINE}" != "pgui-smoke" && "${PIPELINE}" != "pgui-extended" ]]; then
  echo "UNKOWN PIPELINE:  ${PIPELINE}"
  exit 1
fi

# Disable ipv6
echo 1 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6


tests_ran=0

# use a common, but hopefully unique prefix for the log destination
formatted_date=$(date '+%Y%m%d-%H%M%S')
echo  "Running pipe number: ${instance_no}"
sudo pkill rsyslogd
sleep 0.2
pgrep rsyslogd >> /dev/null  || $(sudo rsyslogd &)

# Use grunt to figure out the number of tests
tests_count_output=`grunt e2etest --pipes=10 --pipe=${instance_no} --count`
# Taking out the number from the whole message
tests_count=$( echo ${tests_count_output/Done, without errors.} | cut -f 1 -d " " )

echo "No. of tests will be run: ${tests_count}"
for test_no in $(seq 1 "${tests_count}"); do
  # Use grunt to figure out the name of test
  test_name=`grunt e2etest --pipes=10 --pipe=${instance_no} --index=${test_no} --name`
  # take the name out of the output
  test_name=$( echo ${test_name/Done, without errors.} | sed 's/.*--test_pattern=\(.*\)\( .*\)/\1/' | cut -f 1 -d " " )
  echo "Running test: ====== ${test_name} ========="

  # Run the test and capture it's output
  grunt e2etest --pipes=10 --pipe=${instance_no} --index=${test_no} >& "${EXPORT_FAILURES_DIR}/${test_name}.log"
  result="$?"

  if [[ "${result}" -ne "0" ]] ; then
    echo "                 FAILED"
    mv "${EXPORT_FAILURES_DIR}/${test_name}.log" "${EXPORT_FAILURES_DIR_TMP}/${test_name}.FAILED.log"
    # grunt generated logs are generated in /opt/pg/log/ and aren't in tar.gz form
    tar -zcf "${EXPORT_FAILURES_DIR_TMP}/${test_name}.tar.gz" /opt/pg/log/${test_name}*
  else
    mv "${EXPORT_FAILURES_DIR}/${test_name}.log" "${EXPORT_FAILURES_DIR_TMP}/${test_name}.log"
  fi
  rm -rf /opt/pg/log/*
  rm -rf ${EXPORT_FAILURES_DIR}/*
done
# run tests for this instances

echo "${tests_count}" > ${EXPORT_FAILURES_DIR_TMP}/total_tests_inst${instance_no}
#Copy logs to /opt/pg/log for get_latest_logs to copy the tests.
mkdir -p /opt/pg/log/grunt-pipe-${instance_no}
cp -r ${EXPORT_FAILURES_DIR_TMP} /opt/pg/log/
echo " All Logs are in :: ${EXPORT_FAILURES_DIR}"
echo 'All done'
