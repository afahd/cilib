#!/bin/bash -e

## This script prepares a 'gitsync.sh' script which is copied inside cloud instance to prep the system
## for running build_all.sh script later.

. gc_helpers.sh
source /home/$USER/.aurora.conf
source aurora_infra_settings.conf

git_script=$1
branch=$2
project=$3
refspec=$4
branch_translations_path=$5
test_against=""

APT_COMPONENT=""


# Convert the branch name to respective component name
default_branch=$(translate_branch "$branch" "$project" "default" "${branch_translations_path}")

for key in ${!BRANCH_TO_COMPONENT[@]}; do
  if [[ "${key}" == ${default_branch} ]]; then
    APT_COMPONENT=${BRANCH_TO_COMPONENT[$key]}
    break
  fi
done

if [[ $APT_COMPONENT == "" ]]; then
  echo "Unable to find the branch -> component mapping for $branch"
  exit 1
fi

# Get the refspecs for the repos this commit need to be tested against
if [[ "$refspec" =~ refs/changes/* ]]; then
  test_against=$(commit_test_against)
fi

###### Prepare to create and strt writing to the gitsync script ############

## Prepare the git script to write into
echo "Writing to the $git_script script"
cat /dev/null > ${git_script}
# STEP-1: cleanup
#GPG keys expire after ~10 days, after which /opt/pg/var/www needs to
#be nuked for master as well and fresh build-all.sh needs to be run
#(Temporary workaround to cleanup directories for a cleaner environment)
cat >> ${git_script} <<DELIM__
#!/bin/bash -e
set -e
. /opt/pg/env/alps.bashrc
step=\$1
repo=\$2

case \$step in
  cleanup)
echo 'Performing cleanup'
sudo rm -rf /opt/pg/var/www/*
rm -rf /opt/pg/bin/*
rm -rf /opt/pg/systest/*
rm -rf /opt/pg/sal/
DELIM__
for p in ${PROJECT_LIST[@]}; do
  cat >> ${git_script} <<DELIM__
if [[ -d /home/plumgrid/work/${p}/ ]]; then
  cd /home/plumgrid/work/${p}/ && git clean -fdx
fi
DELIM__
done

# STEP-2: Fetch tools
cat >> ${git_script} <<DELIM__
rm -rf /opt/pg/systest
    ;;
  tools)
DELIM__
## Update and install the tools in the snapshot in case some new packages were added.
modify_git_config "tools" "${gerritid}" "${git_script}"
cat >> ${git_script} <<DELIM__
echo 'Extracting and rebuild tools'
cd /home/plumgrid/work/tools
git fetch
git checkout master
git reset --hard origin/master
    ;;
  install_gcloud)
DELIM__
cat >> ${git_script} <<DELIM__
git clone ssh://${gerritid}@${GERRIT_IP}:${GERRIT_PORT}/gcloud -- /home/plumgrid/work/gcloud
cd /home/plumgrid/work/gcloud
mkdir build
cd build
cmake ..
make install
  ;;
  all_repos)
DELIM__

## Checkout the requested branch on all the projects
modify_git_config "\${repo}" "${gerritid}" "${git_script}"
cat >> ${git_script} <<DELIM__
branch=\$3
git_tag=\$4
echo "Extracting and rebuilding \${repo} for branch \${branch}"
if [[ -d /home/plumgrid/work/\${repo}/ ]]; then
  cd /home/plumgrid/work/\${repo}
  git fetch
  git reset --hard origin/\${branch}
  git checkout \${branch}
  git reset --hard origin/\${branch}
else
  mkdir /home/plumgrid/work/\${repo}/
  cd /home/plumgrid/work/\${repo}
  git clone ssh://${gerritid}@${GERRIT_IP}:${GERRIT_PORT}/\${repo} -- /home/plumgrid/work/\${repo}/
  git checkout \${branch}
fi

# Checkout to a given tag
echo "Checkout out tag \${git_tag} for \${repo}"
git checkout \${git_tag} || retval=$?
    ;;
  iovisor)
DELIM__
## Update and install iovisor.
modify_git_config "iovisor" "${gerritid}" "${git_script}"
cat >> ${git_script} <<DELIM__
echo 'Getting right version of iovisor'
cd /home/plumgrid/work/alps
source dependencies-versions.sh
echo \${git_dep_branch[iovisor]}
cd /home/plumgrid/work/iovisor
git fetch origin \${git_dep_branch[iovisor]}
git reset --hard FETCH_HEAD
DELIM__
# Step-5: -- Checkout the required changes for the defined porject
#         -- Build tools and iovisor
#         -- Set apt-component on the repos and run cmake .. again
cat >> ${git_script} <<DELIM__
    ;;
  checkout)
DELIM__
if [[ "$refspec" =~ refs/changes/* ]]; then
  ## Checkout the request commit in the request project
  cat >> ${git_script} <<DELIM__
cd /home/plumgrid/work/${project}
git fetch ssh://${gerritid}@${GERRIT_IP}:${GERRIT_PORT}/${project} ${refspec}
git checkout FETCH_HEAD
DELIM__
elif [[ "$refspec" != "none" ]]; then
  ##Checkout the requested branch
  cat >> ${git_script} <<DELIM__
cd /home/plumgrid/work/${project}
git checkout origin/$refspec
DELIM__
fi

## Checkout the requested commit for test-against repository acc to commit message
if [[ ! -z "${test_against}" ]] ; then
  test_project=$(echo $test_against | cut -f1 -d':' | abbrev_to_repository)
  test_refspec=$(echo $test_against | cut -f2 -d':')
  cat >> ${git_script} <<DELIM__
cd /home/plumgrid/work/${test_project}
git fetch ssh://${gerritid}@${GERRIT_IP}:${GERRIT_PORT}/${test_project} ${test_refspec}
git checkout FETCH_HEAD
DELIM__
fi

cat >> ${git_script} <<DELIM__
cd /home/plumgrid/work/pkg/scripts
sed -i "/export APT_REPO_HOST/ c\export APT_REPO_HOST=127.0.0.1 && export APT_COMPONENT=${APT_COMPONENT}" build-all.sh
    ;;
  cmake_repos)
DELIM__


for p in ${COMMON_CMAKE_PROJECTS[@]}; do
cat >> ${git_script} <<DELIM__
if [[ -d /home/plumgrid/work/${p}/ ]]; then

  if [[ ${p} == "pg_ui" && -f "/home/plumgrid/work/pg_ui/devtools/Gruntfile.js" ]]; then
    set -x
    sudo add-apt-repository -y ppa:chris-lea/node.js
    sudo apt-get update
    sudo apt-get install -y nodejs
    pushd /home/plumgrid/work/pg_ui/devtools/
    sudo npm install npm -g
    npm install grunt --save-dev
    npm install grunt-cli --save-dev
    npm install
    export PATH=~/work/pg_ui/devtools/node_modules/grunt-cli/bin/:$PATH
    grunt build
    popd
  else
    mkdir -p /home/plumgrid/work/${p}/build
    cd /home/plumgrid/work/${p}/build
    export APT_COMPONENT=${APT_COMPONENT}
    export PATH="/usr/lib/ccache/:\${PATH}"
    cmake ..
  fi

fi
DELIM__
done

cat >> ${git_script} <<DELIM__
  ;;
  corelib)
DELIM__

if [[ $test_project == "corelib" ]]; then
  cat >> ${git_script} <<DELIM__
echo "Corelib used in test-against, no need to extract version"
DELIM__
else
  cat >> ${git_script} <<DELIM__
cd /home/plumgrid/work/alps
source dependencies-versions.sh
if [[ -n \${git_dep_branch[corelib]} ]]; then
  echo "Corelib Version: \${git_dep_branch[corelib]}"
  cd /home/plumgrid/work/corelib
  git checkout \${git_dep_branch[corelib]}
else
  echo 'git_dep_branch[corelib] is empty, exiting'
  exit 1
fi
DELIM__
fi

cat >> ${git_script} <<DELIM__
    ;;
  *)
    echo "Step \$step provided is invalid. Exiting!"
    exit 1
esac
DELIM__