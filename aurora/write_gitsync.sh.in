#!/bin/bash -e

## This script prepares a 'gitsync.sh' script which is copied inside docker to prep the system
## for running build_all.sh script later.

. gc_helpers.sh
source /home/$USER/.aurora.conf
source aurora_infra_settings.conf

git_script=$1
branch=$2
project=$3
refspec=$4

APT_COMPONENT=""

# Describe the possible mappings for branch->component translations
declare -A branch_to_component
branch_to_component['master']='unstable'
branch_to_component['stable_4_0']='everest'

# Convert the branch name to respective component name
for key in ${!branch_to_component[@]}; do
  if [[ "${key}" == ${branch} ]]; then
    APT_COMPONENT=${branch_to_component[$key]}
    break
  fi
done
if [[ $APT_COMPONENT == "" ]]; then
  echo "Unable to find the branch -> component mapping for $branch"
  exit 1
fi

###### Prepare to create and strt writing to the gitsync script ############

## Prepare the git script to write into
echo "Writing to the $git_script script"
cat /dev/null > ${git_script}
echo "#!/bin/bash -e" >> ${git_script}
echo "set -e" >> ${git_script}
echo ". /opt/pg/env/alps.bashrc" >> ${git_script}

#GPG keys expire after ~10 days, after which /opt/pg/var/www needs to
#be nuked for master as well and fresh build-all.sh needs to be run
echo "echo 'Performing cleanup'" >> ${git_script}
echo "sudo rm -rf /opt/pg/var/www/*" >> ${git_script}
for p in ${PROJECT_LIST[@]}; do
  echo "cd /home/plumgrid/work/${p}/build && sudo rm -rf *" >> ${git_script}
done
echo "rm -rf /opt/pg/systest" >> ${git_script}

## Update and install the tools in the snapshot in case some new packages were added.
modify_git_config "tools" "${gerritid}" "${git_script}"
echo "echo 'Extracting and rebuild tools'"  >> ${git_script}
echo "cd /home/plumgrid/work/tools" >> ${git_script}
echo "git fetch" >> ${git_script}
echo "git checkout master"  >> ${git_script}
echo "git reset --hard origin/master" >> ${git_script}

## Checkout the requested branch on all the projects
for p in ${PROJECT_LIST[@]}; do
  modify_git_config "${p}" "${gerritid}" "${git_script}"
  echo "echo \"Extracting and rebuilding $p for branch ${branch}\""
  echo "cd /home/plumgrid/work/${p}" >> ${git_script}
  echo "git fetch" >> ${git_script}
  echo "git reset --hard origin/${branch}" >> ${git_script}
  echo "git checkout ${branch}" >> ${git_script}
  echo "git reset --hard origin/${branch}" >> ${git_script}
done

## Update and install iovisor.
modify_git_config "iovisor" "${gerritid}" "${git_script}"
echo "echo 'Getting right version of iovisor'"  >> ${git_script}
echo "cd /home/plumgrid/work/alps"  >> ${git_script}
echo "source dependencies-versions.sh"  >> ${git_script}
echo "echo \${git_dep_branch[iovisor]}" >> ${git_script}
echo "cd /home/plumgrid/work/iovisor" >> ${git_script}
echo "git fetch" >> ${git_script}
echo "git reset --hard \${git_dep_branch[iovisor]}" >> ${git_script}

echo "cd /home/plumgrid/work/pkg/scripts" >> $git_script
echo "sed -i \"/export APT_REPO_HOST/ c\export APT_REPO_HOST=127.0.0.1 && export APT_COMPONENT=${APT_COMPONENT}\" build-all.sh" >> $git_script

if [[ "$refspec" != "none" ]]; then
  ## Checkout the request commit in the request project
  echo "cd /home/plumgrid/work/${project}" >> $git_script
  echo "git fetch ssh://${gerritid}@${GERRIT_IP}:${GERRIT_PORT}/${project} ${refspec}" >> $git_script
  echo "git checkout FETCH_HEAD" >> $git_script
fi

echo "cd /home/plumgrid/work/tools/build" >> ${git_script}
echo "cmake .." >> ${git_script}
echo "sudo make packages" >> ${git_script}
echo "make -C packages install" >> ${git_script}
echo "make -j4 install" >> ${git_script}

echo "cd /home/plumgrid/work/iovisor/bld" >> ${git_script}
echo "make -j4 -k" >> ${git_script}
echo "sudo make install" >> ${git_script}

## Checkout the requested branch on all the projects
for p in ${PROJECT_LIST[@]}; do
  echo "cd /home/plumgrid/work/${p}/build" >> ${git_script}
  echo "export APT_COMPONENT=${APT_COMPONENT}" >> ${git_script}
  echo "cmake .." >> ${git_script}
done


echo "cd /home/plumgrid/work/${project}/build" >> ${git_script}
echo "export APT_COMPONENT=${APT_COMPONENT}" >> ${git_script}
echo "cmake .." >> ${git_script}
