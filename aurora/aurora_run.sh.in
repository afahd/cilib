#!/bin/bash -e

echo "aurora_run.sh started with [aurora_run.sh  $@]"

export PATH=@CMAKE_BINARY_DIR@/:/opt/pg/scripts:$PATH
. gc_helpers.sh
. aurora_utils.sh
source /home/$USER/.aurora.conf

# TODO: Make a decision about machine type and Disk sizes.
MACHINETYPE="n1-standard-4"
DISK1_SIZE=10
DISK2_SIZE=200

declare -A MINOR_STEPS_ST
declare -A MINOR_STEPS_ED
BUILD_ENV_USER=${USER}
MAJOR_STEPS="build"
MINOR_STEPS_ST[run]=1
MINOR_STEPS_ED[run]=15

function usage() {
cat <<EOF
usage: $0
-c | --cleanup : Test Cleanup
-Q | --major : Jump to specific major step in the install process
-R | --minor : Jump to specific minor step in the install process
-E | --minor_end : Stop at this step when in debug
-B | --build_id: Mention the build-id on which you want to test
-T | --test: Test script to run.
-U | --test_uuid: Test unique id to use.
-O | --stop : DONT Continue beyond the specifict step to end of the installation
-h | --help : help
EOF
exit 0
}

# Parsing arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--cleanup ) CLEANUP=1;  ;;
    -Q| --major ) MAJOR_STEPS="$2"; TMP_MAJOR="$2"; shift ;;
    -R| --minor ) MINOR_STEPS_ST[$TMP_MAJOR]="$2"; shift ;;
    -E| --minor ) MINOR_STEPS_ED[$TMP_MAJOR]="$2"; shift ;;
    -B| --build_id ) BUILD_ID=$2; shift ;;
    -T| --test_script ) TEST_SCRIPT=$2; shift ;;
    -I| --instance_name ) INSTANCE_NAME=$2; shift ;;
    -U| --test_uuid ) SUUID=$2; shift ;;
    -O| --stop ) STOP=1; ;;
    -h | --help ) usage; ;;
    -- ) shift; break ;;
    * )
      echo "Unknown parameter: $1";
      usage; break;;
  esac
  shift
done

printf "\n\n********* RUNID= ${SUUID} *********\n\n"
if [ -z ${SUUID+x} ]; then
  echo "Input parameter -U is required"
  exit 1
fi

# TODO: Get the latest snapshot id and use that in below variables
DOCK_NAME="pg_dev_${BUILD_ID}:latest"

function run_test() {
  local step=$1

  case "$step" in
  1)
    echo "Creating the disk[${INSTANCE_NAME}-d1] and [${INSTANCE_NAME}-d2] for the instance in the cloud from ${BUILD_ID}"
    tryexec gcloud -q --verbosity error compute disks create "${INSTANCE_NAME}-d1" \
      --source-snapshot "${BUILD_ID}-ssd1" --type "pd-standard" --size="$DISK1_SIZE"
    tryexec gcloud -q --verbosity error compute disks create "${INSTANCE_NAME}-d2" \
      --source-snapshot "${BUILD_ID}-ssd2" --type "pd-standard" --size="$DISK2_SIZE"
    record_step $step
    ;;

  2)
    echo "Creating the instance[$INSTANCE_NAME] in the cloud"
    tryexec gcloud -q --verbosity error compute instances create "${INSTANCE_NAME}" \
      --machine-type "$MACHINETYPE" --network "net-10-10" --maintenance-policy \
      "MIGRATE" --scopes "https://www.googleapis.com/auth/devstorage.read_only" \
      --disk "name=${INSTANCE_NAME}-d1" "mode=rw" "boot=yes" "auto-delete=yes" \
      --disk "name=${INSTANCE_NAME}-d2" "mode=rw" "boot=no" "auto-delete=yes" --no-address --tags "no-ip"
    record_step $step
    ;;

  3)
    echo "Waiting for the machine to boot up and allow ssh access"
    tryexec wait_for_instance ${INSTANCE_NAME}
    record_step $step
    ;;

  4)
    echo "starting the pgdev container ${DOCK_NAME}"
    tryexec run_dock_container ${INSTANCE_NAME} ${DOCK_NAME} "./local_docker_id" "./local_docker_ip"
    record_step $step
    ;;

  5)
    echo "Copy build-instance key to pgdev container"
    #run_cmd_gci ${INSTANCE_NAME} "ssh-keygen -t rsa -N \"\" -f ~/.ssh/id_rsa"
    tryexec run_cmd_gci ${INSTANCE_NAME} "sudo su -c \"cat /home/$USER/.ssh/id_rsa.pub >> \
      /var/lib/docker/btrfs/subvolumes/\`cat local_docker_id\`/home/plumgrid/.ssh/authorized_keys\""
    record_step $step
    ;;

  6)
    echo "Copy local key to pgdev container"
    tryexec scp -o StrictHostKeyChecking=no -o "ProxyCommand ssh $COMM_IP nc ${INSTANCE_NAME} 22" ~/.ssh/id_rsa.pub ${USER}@${INSTANCE_NAME}:./auth-key.pub
    tryexec run_cmd_gci ${INSTANCE_NAME} "sudo su -c \"cat /home/$USER/auth-key.pub >> \
      /var/lib/docker/btrfs/subvolumes/\`cat local_docker_id\`/home/plumgrid/.ssh/authorized_keys\""
    record_step $step
    ;;

  7)
    check_ssh_server_status ${INSTANCE_NAME}
    if [[ $retval == 1 ]]; then
      run_cmd_gci ${INSTANCE_NAME} "sudo docker ps"
      echo "Dokcer stopped.. Please run aurora build with --continue to retry!!"
      record_step 4
      exit $retval
    fi

    record_step $step
    ;;

  8)
    # This is here only untill https://gerrit:8443/#/c/10751/ gets merged.
    echo "Execute the pre run-automaton on docker container"
    echo "sed -i '/restart_lxc lvm/a tryexec lxc-attach -n lvm -- /bin/bash -c \"echo 'NOZEROCONF=true' >> /etc/sysconfig/network\"' /opt/pg/systest/lxc/automaton/automaton-helpers.sh" > /tmp/zeroconf.sh
    tryexec upload_to_docker ${INSTANCE_NAME} /tmp/zeroconf.sh /tmp/zeroconf.sh
    tryexec run_cmd_docker ${INSTANCE_NAME} "/bin/bash /tmp/zeroconf.sh"
    record_step $step
    ;;

  9)
    echo "Execute the run-automaton script on docker container"
    tryexec run_cmd_docker_sshforwarding_bg ${INSTANCE_NAME} "/bin/bash run_automaton_init.sh" "/tmp/automaton_init.log"
    record_step $step
    ;;

  10)
    echo "Poll the automaton-init cmd (tailing \"/tmp/automaton_init.log\" for complete logs)"
    tryexec run_poll_cmd ${INSTANCE_NAME} "run_automaton_init.sh" "/tmp/automaton_init.log"
    record_step $step
    ;;

  11)
    tryexec upload_to_docker ${INSTANCE_NAME} ${TEST_SCRIPT} /tmp/user_test_script.sh
    # tryexec is not needed because test can fail as well
    run_cmd_docker_bg ${INSTANCE_NAME} "/bin/bash /tmp/user_test_script.sh" "/tmp/test.logs"
    record_step $step
    ;;

  12)
    echo "Poll the test logs (tailing \"/tmp/test.log\")"
    tryexec run_poll_cmd ${INSTANCE_NAME} "/tmp/user_test_script.sh" "/tmp/test.logs"
    record_step $step
    ;;

  13)
    tryexec get_latest_logs ${INSTANCE_NAME}
    record_step $step
    ;;

  14)
    echo "Shutting down the Instance ${INSTANCE_NAME}"
    tryexec gcloud compute instances delete ${INSTANCE_NAME} --delete-disks all  -q
    record_step $step
    ;;

  *)
    echo "NOP - $step"
  ;;
  esac
}

for MAJOR_STEP in $MAJOR_STEPS; do
  echo " ====== Starting STEP [$MAJOR_STEP] Number of Steps ::${MINOR_STEPS_ST[$MAJOR_STEP]} -> ${MINOR_STEPS_ED[$MAJOR_STEP]}  ======"
  for MINOR_STEP in `seq ${MINOR_STEPS_ST[$MAJOR_STEP]} ${MINOR_STEPS_ED[$MAJOR_STEP]}`; do
    echo "    === Starting STEP [$MAJOR_STEP][$MINOR_STEP] ==="
    case "$MAJOR_STEP" in
      # init)
      # build_image $MINOR_STEP
      # ;;
      run)
        run_test $MINOR_STEP
      ;;
      *)
        echo "UNKNOWN STEP $MAJOR_STEP.$MINOR_STEP"
      ;;
    esac
    if [ -n "$STOP" ] ; then
      exit
    fi
  done
done
